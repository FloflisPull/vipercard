
// ben fisher, 2018
// some inspiration from http://www.jaedworks.com/hypercard/scripts/hypertalk-bnf.html
// (viewing this file as C may highlight the syntax better)

// not supported from product: ask file, answer file, close

//      pop, push supports only simple constructs
//      select supports only selecting chunk of a field
//      sort only supports sorting text

// this is the syntax seen by the parser, which isn't the same 
// as what is typed by the user -- we'll apply transformations during "rewrite".
// all commands start with ..., which means 3 tkSyntaxMark tokens

// don't have consecutive terms like tkIdentifier <Expression> or tkIdentifier <Object>
// this is ok now, but it limits flexibility in case we want to allow consecutive tkIdentifiers
// use rewrites to make it tkSyntaxMark <Expression> instead.
// e.g. vpcRewritesCommands will turn 'show at <Expression>' into 'show tkSyntaxMark <Expression>'

// addition. supports customfns
BuiltinCmdAdd:=... <Lvl1Expression> _to <HContainer>                                                             
// show dialog. software rewrite "with" to tkSyntaxMark. it's a Lvl6Expression not an Expr so that Or works
// during software rewrite, check for "answer file" and "answer program" and show NYI
BuiltinCmdAnswer:=... <Expr> [tkSyntaxMark <Lvl6Expression> [ _or <Lvl6Expression> [ _or <Lvl6Expression>]]]                 
// arrowkey. simply sends an arrow key message. if not trapped, goes to next cd etc. 
// left and right are constants, so you can say `arrowkey left`, we don't need to rewrite syntax
// we have the default arrowkey in standardlib but user can override
// show dialog. software rewrite `with` to tkSyntaxMark and `ask password` to `ask ," and `ask file` to NYI
// original product lets you omit quotes ask "g" with why is this happening but I don't think i will
BuiltinCmdAsk:=... [tkComma] <Expr> [tkSyntaxMark <Expr>]                                            
// play beep sound.
BuiltinCmdBeep:=... [<Expr>]
// choose tool. rewrite will turn `choose brush tool` into `choose "brush"`
// for compatibility the choose message can be trapped, but in standardlib it will call BuiltinCmdVpccalluntrappablechoose to actually change the tool
// in vipercard this only changes the tool for script running-simulated drawing purposes
BuiltinCmdVpccalluntrappablechoose:=... <Expr>
// simulate click. software rewrite "with" to tkSyntaxMark. supports click at x if x contains coords.
BuiltinCmdClick:=... tkIdentifier <HBuiltinCmdDrag_1> [ tkSyntaxMark tkIdentifier [ tkComma tkIdentifier [ tkComma tkIdentifier ] ] ]  
// close. show NYI in rewrite
// commandKeyDown, a way to simulate a keypress like Cmd+A. show NYI in rewrite
// controlkey: goes up through message hierarchy, handled by vipercardstdlib
// convert. changes date/time formats show NYI in rewrite
// copy. show NYI in rewrite
// create.  show NYI in rewrite. say domenu "new button" to create a button etc.
// debug. show NYI in rewrite
// delete. in rewrite error on mention of "menu"
BuiltinCmdDelete:=... { <HChunk> <HSimpleContainer> | <Object> }                                   
// plays a phone dial number
BuiltinCmdDial:=... <Expr>                                                                           
// disable a button. in rewrite error on mention of "menu"
BuiltinCmdDisable:=... <Object>                                                                     
// divide. rewrite "by" to a  tkSyntaxMark
// the rewrite isn't really needed, but it's a good idea in case we ever need two consecutive tkidentifiers
// to be a valid expression
BuiltinCmdDivide:=... <HContainer> tkSyntaxMark <Lvl1Expression>                                                              
// domenu. 
// we should also support doMenu "New Card", "Object" like in the product
// note that cards can override the domenu message. note that in the product you can omit quotes, domenu new button works
// in rewrite syntax say we don't support "without dialog" or "with keys"
BuiltinCmdVpccalluntrappabledomenu:=... <Expr> [tkComma <Expr>]       
// drag, simulate mouse drag
// in rewrite syntax from "with" to tkSyntaxMark
// do. in rewrite, turned into send x to me
BuiltinCmdDrag:=... tkIdentifier MANYSEP{{ _to / <HBuiltinCmdDrag_1> }}ENDMANYSEP [ tkSyntaxMark tkIdentifier [ tkComma tkIdentifier [ tkComma tkIdentifier ] ] ]   
HBuiltinCmdDrag_1:=<Lvl4Expression> [tkComma <Lvl4Expression>]                      --->BuildMap
// edit. show NYI in rewrite
// enable a button. in rewrite error on mention of "menu"
BuiltinCmdEnable:=... <Object>                
// enterInField. sent up the message hierarchy, usually does nothing, handled by vipercardstdlib. takes no args
// enterKey. sent up the message hierarchy, usually does nothing, handled by vipercardstdlib. takes no args
// export. show NYI in rewrite
// errorDialog. in emulator it can be trapped, so let's follow suit I guess
BuiltinCmdVpccalluntrappableerrordialog:=... <Expr>       
// find. show NYI in rewrite
// functionkey: sent up the message hierarchy, usually does nothing, handled by vipercardstdlib.
// software rewrites "Get" to "Put"...into it
// BuiltinCmdGet:=... <Expr>            
// note that `back` and `forth` are keywords so they don't need special handling
// BuiltinCmdGo:= the new design is that it's rewritten into a call to internalvpcmovecardhelper, and
// it's all done in software.
// for example, actually creating an object or actually changing current card
// see also internalvpcmessagesdirective -- but it's a keyword, not a command
// help. sent up the message hierarchy, usually does nothing, handled by vipercardstdlib. takes no args
// hide. in rewrite error on mention of "menu"
BuiltinCmdHide:=... <Object>
// import. show NYI in rewrite
// keydown. show NYI in rewrite
// lock. parsed in software, takes no args.
BuiltinCmdLock:=... tkIdentifier
// mark. other parsing done in software
// not supported yet but I'll leave this syntax here
BuiltinCmdMark:=... [_not] {tkSyntaxMark <ObjectCard> | tkComma <Expr> <Of> <ObjectFld> }
// multiply. rewrite from "by" the tkIdentifier is "by"
BuiltinCmdMultiply:=...<HContainer> tkSyntaxMark <Lvl1Expression>                                                               
// open. show NYI in rewrite
// pop card. has a little stack to go to. implemented entirely in software
// BuiltinCmdPop:=... into|before|after container 
// play. "tempo" to tkSyntaxMark
// currently there is a    tkIdentifier for "load"                                               
BuiltinCmdPlay:=... <Expr> [tkIdentifier] [tkSyntaxMark <Expr>]
// push card. has a little stack to go to. implemented entirely in software
// put variable in. in rewrite, reject if "menu" is mentioned.
// tkIdentifier here is 'before' 'after' 'into'
// the traditional <Expr> [ tkIdentifier [ <HContainer> ]] does work for now, but breaks if an Expr can ever have 2 consecutive tkIdentifiers
// buildmap would work fine, but returns an array for performance reasons
// rewrites make the HContainer always present.
BuiltinCmdPut:=... <Expr> tkSyntaxMark tkIdentifier tkSyntaxMark <HContainer>                      --->Custom--->any
// read. show NYI in rewrite
// reply. show NYI in rewrite
// request. show NYI in rewrite
// reset. reset paint | menubar | printing. reset paint might be useful, let's support that.
BuiltinCmdReset:=... tkIdentifier
BuiltinCmdReplace:=... <Expr> tkSyntaxMark <Expr> tkInOnly  <HSimpleContainer>
// returnInField. sent up the message hierarchy, usually does nothing. takes no args
// returnKey. sent up the message hierarchy, usually does nothing. takes no args
// save. show NYI in rewrite
// select. "select empty" is supported, "select button/fld" is not (takes you to the edit tool),
// "select text of cd fld 1" is supported, in software we'll make sure it's not a variable.
// however we currently don't support select char 2 of the selection
BuiltinCmdSelect:=...  tkStringLiteral [ <HContainer> ]                                         
// setting a property
BuiltinCmdSet:=... [_the] <HCouldBeAPropertyToSet> [ tkOfOnly { <HChunk> { <ObjectFld> | _me | [_the] _target } | <Object> } ] _to <AnyPropertyVal>    
// show an object, or show all cards. if "menu" or "picture of", or "window", error in rewrite
// we don't yet support show all cards or show 6 cards
BuiltinCmdShow:=...  <Object> [ tkSyntaxMark <Lvl4Expression> [tkComma <Lvl4Expression>]  ]                                  
// we'll build the sort-by-each part in software. tkStringLiteral1 is "numeric|alphabetic" tkStringLiteral2 is "ascending|descending"
BuiltinCmdSort:=... tkStringLiteral tkStringLiteral tkChunkGranularity tkOfOnly <HSimpleContainer>
// start using, currently a no-op
BuiltinCmdStart:=... tkIdentifier <ObjectStack>
// stop using, currently a no-op
BuiltinCmdStop:=... tkIdentifier <ObjectStack>
// subtraction. rewrite 'from' to syntaxmarker
BuiltinCmdSubtract:=... <Lvl1Expression> tkSyntaxMark <HContainer>      
// tabkey. sent up the message hierarchy, usually goes from one field to the next. takes no args
// type. set NYI during rewrites
// unlock.
BuiltinCmdUnlock:=... tkIdentifier [ tkStringLiteral tkStringLiteral tkStringLiteral tkStringLiteral ]
// unmark, rewrite it to "mark", "_not"
// visual effect, parse it in software. the visual effect seems to last until the end of the scope
BuiltinCmdVisual:=... tkIdentifier [ tkStringLiteral tkStringLiteral tkStringLiteral tkStringLiteral ]
// wait supports  second,seconds,milliseconds,ms,ticks. defaults to a tick, which is 60th of second
// we rewrite `wait for 2 ms` into `wait 2 "ms"`
// or "wait until/while" which we should just expand into a while loop. note that "second" is a tkOrdinal
BuiltinCmdWait:=... <Expr> [ { tkIdentifier | tkOrdinal  } ]
// write. set NYI during rewrites
// used internally
CmdSend:=... <Expr> _to <Object>                    --->BuildMap
InternalCmdRequestEval:=... <Expr>             --->Custom--->any
InternalCmdUserHandler:=... MANYSEP{{ tkComma / <Expr> }}ENDMANYSEP             --->Custom--->any

