
// ben fisher, 2018
// some tips from http://www.jaedworks.com/hypercard/scripts/hypertalk-bnf.html
// (viewing this file as C may highlight the syntax better)

// extremely cutting down number of tokens is no longer necessary,
// with the ensureOptimizations flag now chevrotain's lexing 
// builds a map based on possible first character, so is much faster.

// there are several semi-keywords, like "transparent". You can use the term transparent with no parens like set the style to transparent,
// but also create a variable (put "abc" into transparent) with no problem. so is "transparent" a keyword or not?
// (this might have to do with the product's behavior where unwritten to variables hold their names, e.g. get abc is "abc" if you've never written to abc)
// the product is very lenient -- you can even assign over functions (put "abc" into cos; answer cos && cos)
// note that if we made "transparent" et all a token, then it would be difficult to allow a variable named transparent. also, we'd have nearly 100 more tokens to deal with.
// and when you wanted to set a property and had a typo like set the autohilite2 of cd btn 1, it would be a syntax error, which might be confusing
// let's use this approach:
//      certain terms are reserved keywords like "word", "item". defined as tokens, cannot be used as variable names at all.
//      certain terms are built-in properties/functions. "cos", "mouseloc". not defined as tokens. if you try 'put "abc" into cos' we check at runtime (not compile time) and error then.
//      certain terms are allowed as variable names but are also interpreted as a string in property-set contexts. like transparent or gray.

// in this version we try to parse as much of the language as possible,
// even for features like custom menus that we don't support yet,
// so that old scripts can run without too many changes.

// use (?:noncapturinggroups)
// {{nothingdirectlyafter}} expands to (?![a-zA-Z0-9_]) which means that it can't be directly followed by a letter or numeral.
// Be careful when lexing because tokens are greedy. If you have 3 tokens /fro/ /from/ /frome/,
// the string "from frome" becomes [fro, m, fro, me].
// the (?![a-zA-Z0-9_]) means to look ahead to make sure no other word/letters are there.
// important, otherwise if you have tokens "the" and "then", you'd need to order everything right, or "then" would lex into "the", "n"

// in a group of alternates, I think it's a good idea to put ones that will fail fast first
// Bad parts about reducing number of tokens:
//      more analysis needed at runtime. although we already need to do a lot of analysis there anyways, so it's not so bad. do need to confirm the right words use though.
//      grammar is more fragile for chevrotain warning about ambiguities. the first time I stripped it down, see vpc001.txt, got a lot of Chev. warnings saying "same prefix" in both paths. unclear if actually a problem but I don't want to increase the lookahead.
//      grammar might have actual true wrong parsing. consider "ask [password] <Expr>". if I made it "ask [TkIdentifier] <Expr>" to try to save a token, if the user typed "ask x-3" it would be parsed as (ask)(x)(-3) and mess up the expression.
//      potentially slower parsing because there are potentially more routes the grammar can take as more keywords are moved to generic tkIdentifiers; might do more backtracking


// changes from original product:
//      you can't read from a variable you have never written to
//      NEW FEATURE: numbers can be written as 1e10 and 1e-10
//      NEW FEATURE: block comments  --[[ to ]]
//      NEW FEATURE: get the number of btns in cd 2
//      continued lines can use either \ or logical not
//      you can use != instead of <>, you can use == instead of =
//      NEW FEATURE: drag from a,b to c,d to e,f
//      NEW FEATURE: replace "a" with "b" in s
//      you can't omit items in a list, like average(1,2,,3)
//      NEW FEATURE: objectById(id)
//      NEW FEATURE: owner is more useful
//      NEW FEATURE: label and name are separate properties
//      CHANGE: the "long id" of objects is now more useful. 
//              if you put the long id into x, you can set properties of x
//      we are more lenient refering to objects. 
//          e.g. we allow 'get the name of cd 1 of this stack', why not since 'go to cd 1 of this stack' and 'the number of cards in this stack' is valid
//          e.g. we allow stack-at-end-of-line in a few more contexts
//      the string versions of "the target" and "the owner of" look a little different, they return our new long id
//      we need parens for if the short id of the owner of cd id prevCard is not the short id of the owner of cd id nextCard then answer "j"
//      we don't support char x + 1 of abc, need char (x + 1) of abc
//      NEW FEATURE: set the fontstyle to grayed
//      NEW FEATURE: set the fontstyle to toggle-bold
//      we don't support "part"
//      do "code" can't yet read/write local vars
//      nearly all chunks supported except 1) negative index 2) backwards bounds 3) deleting a range besides chars
//      use compatibility mode (off by default) to match some weird behavior in original product
//      unless compatibility mode is turned on, "the id" is made consistent for all objects 
//          is also more useful, since the long id actually is long than the short id.

            
// aren't yet supported in software include:
//      domenu can't (yet) be handled/trapped

// changes from v1:
//      put the sin of 4 into x is now supported
//      put sin of 4 into x is now supported, and even the sin of cd fld 1
//      continued lines can use logical not / cool os roman symbols
//      put "a" into fld 1 and put "a" into bg fld 1 both work
//      cd btn "abc" is now case insensitive
//      unsupported commands like "close" are not syntax errors, they will be shown at runtime
//      "send" is more efficient, doesn't need to recompile the whole script, just the snippet
//      NEW FEATURE:  put "bkgnd id 2590" into xx;   put the name of xx into cd fld "myf"
//      you can use one val where most places coords are needed. 
        // put "1,1" into cds; click at cds, to match product
        // click at "1," missing items are treated as 0, to match product
//      you can no longer say put the result() into x, you have to say either put the result into x or put result() into x
//      match the product: you can't say 'get the id of target' or 'get the id of target()', you have to say 'get the id of the target'
//      match the product: we no longer support the in some cases, "the me" and "the hypercard" are no longer valid
//      match the product: we support 'put the name of target' via string rewrites to match the product
//      single line ifs match the product better. last line is "else answer 'hi'" not "else then answer 'hi'"
//      Better cursors, better rendering on different monitor resolutions, more fonts
//      NEW FEATURE:  recursive chunks, put "a" into char 1 of line 3 of cd fld 1

// strings (only way for the user to get a quote char is `put quote & "hi" & quote into s` )
tkStringLiteral=/"[^"\n]*"{{nothingdirectlyafter}}/
// block comments, based on lua. --[[ to ]]
// use [\s\S] to match any char, dotall is new and not supported in all browsers
tkBlockComment=/--\[\[[\s\S]*?\]\]/|||||group: chevrotain.Lexer.SKIPPED,line_breaks:true
// line comment. use negative lookahead so that --[[ is never a line comment
tkLineComment=/--(?!\[\[)[^\n]*/|||||group: chevrotain.Lexer.SKIPPED
// whitespace or a line-continuation. \xC2 is logical not in mac-roman encoding
tkContinuedLineOrWhiteSpace=/(?:[ \t]+)|(?:[\\\xC2][ \t]*\n)/|||||group: chevrotain.Lexer.SKIPPED,line_breaks:true
// official grammar uses this. lookahead to see if it's the last token on the line
tkCardAtEndOfLine=/(?:card|cd)(?=\s*\n)/
// official grammar uses this. lookahead to see if it's the last token on the line
tkBgAtEndOfLine=/(?:background|bkgnd|bg)(?=\s*\n)/
// official grammar uses this. lookahead to see if it's the last token on the line
tkStackAtEndOfLine=/stack(?=\s*\n)/
// a new line
tkNewLine=/\n+/|||||line_breaks:true
// not expected to be lexed from user input, but used as a marker while preparing code to be parsed
tkSyntaxMark=/\?{9}/
// numbers need to disallow letters right afterwards, otherwise 4a becomes ["4", "a"]. note that emulator supports 001 == 1.
tkNumLiteral=/[0-9]+(?:\.[0-9]*)?(?:e[-+]?[0-9]+)?{{nothingdirectlyafter}}/


// terms for objects. OneOfWords uses negative lookahead to force it to be a full word
// used to combine plural and singular into one token. probably better to separate them
// now that we support old-style functions so that "the number of cd btns" doesn't look similar to "the number of cd btn 1"
tkStack=OneOfWords(stack)
tkBg=OneOfWords(background,bkgnd,bg)
tkBgPlural=OneOfWords(backgrounds,bkgnds,bgs)
tkCard=OneOfWords(card,cd)
tkCardPlural=OneOfWords(cards,cds)
tkBtn=OneOfWords(button,btn)
tkBtnPlural=OneOfWords(buttons,btns)
tkFld=OneOfWords(field,fld)
tkFldPlural=OneOfWords(fields,flds)
tkProductName=OneOfWords(hypercard,vipercard)
tkAdjective=OneOfWords(long,short,abbrev,abbr,abbreviated)
tkOrdinal=OneOfWords(last,mid,middle,any,first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth)
tkPosition=OneOfWords(this,prev,previous,next)
tkChunkGranularity=OneOfWords(characters?,chars?,words?,items?,lines?)
tkInOnly=OneOfWords(in)
tkOfOnly=OneOfWords(of)
tkA=OneOfWords(a,an)

// more terms
// this implies that the user cannot create a variable with these names.
// tokens starting with an underscore should accept an image that is the same as their name minus the underscore
_not=OneOfWords(not)
_there=OneOfWords(there)
_is=OneOfWords(is)
_no=OneOfWords(no)
_and=OneOfWords(and)
_or=OneOfWords(or)
_contains=OneOfWords(contains)
_within=OneOfWords(within)
_the=OneOfWords(the)
_message=OneOfWords(msg,message)
_window=OneOfWords(window)
_windows=OneOfWords(windows)
_box=OneOfWords(box)
_me=OneOfWords(me)
_recent=OneOfWords(recent)
_back=OneOfWords(back)
_forth=OneOfWords(forth)
_marked=OneOfWords(marked)
_to=OneOfWords(to)
_menuItem=OneOfWords(menuitems?)
_menu=OneOfWords(menu)
_id=OneOfWords(id)
_number=OneOfWords(number)
_selection=OneOfWords(selection)
_target=OneOfWords(target)

// comma
tkComma=/,/
// open paren
tkLParen=/\(/
// close paren
tkRParen=/\)/
// plus or minus
tkPlusOrMinus=OneOfOr(\+ |or| -)
// mult, div, power, "div", "mod"
tkMultDivideExpDivMod=OneOfOr(\* |or| \/ |or| \^ |or| div{{nothingdirectlyafter}} |or| mod{{nothingdirectlyafter}})
// concat or concat with space
tkStringConcat=OneOfOr(&& |or| &)
// not-equal, greater than, less than
// mac-roman encoding \xAD is not-equal \xB2 \xB3 are lessthan-or-equal
tkGreaterOrLessEqualOrEqual=OneOfOr(<> |or| >=? |or| <=? |or| != |or| ==? |or| \xB2 |or| \xB3 |or| \xAD)


// i think i will have to enumerate the property names in any case,
// in order to distinguish between a prop lookup and an old style function call
// could instead enumerate builtin functions also, but it makes since to assume
// that everything that's not a property is a function, which let's use support custom functions.
// the rect of cd fld 1 -- treats cd fld 1 as an object
// the sin of cd fld 1 -- retrieves the *contents* of cd fld 1
// the list below contains only the long form, synonyms like 'loc' will be rewritten via rewritePropertySynonyms
// checkmark isn't new to us, it is already in list
tkUnaryVipercardProperties=OneOfWords(alltext,label,showlabel,singleline,defaulttextstyle,defaulttextfont,defaulttextsize)

/* generated code, any changes past this point will be lost: --------------- */
tkAllUnaryPropertiesIfNotAlready=OneOfWords(autohilite,autoselect,autotab,bottom,bottomright,cantabort,cantdelete,cantmodify,cantpeek,checkmark,commandchar,dontsearch,dontwrap,enabled,family,fixedlineheight,freesize,height,hilite,icon,left,location,locktext,markchar,menumessage,multiplelines,name,owner,partnumber,rectangle,reporttemplates,right,script,scroll,sharedhilite,sharedtext,showlines,showname,showpict,size,style,textalign,titlewidth,top,topleft,visible,widemargins,width,zoomed)

tkAllNullaryOrUnaryPropertiesIfNotAlready=OneOfWords(scriptinglanguage,textfont,textheight,textsize,textstyle,version)

/* we've automatically searched through all word-like tokens to check for any overlap (like how _id is both a token and a property name) */
HAllPropertiesThatCouldBeUnary:={tkAllUnaryPropertiesIfNotAlready | tkUnaryVipercardProperties | tkAllNullaryOrUnaryPropertiesIfNotAlready |_id|_marked|_number}                      --->ProcessOr--->IToken
HAnyFnNameOrAllPropertiesThatCouldBeNullary:={ <HAnyFnName> | tkAllNullaryOrUnaryPropertiesIfNotAlready }                      --->ProcessOr--->IToken
HAnyFnName:= { tkIdentifier | _target|_windows}                      --->ProcessOr--->IToken
/* generated code, any changes above this point will be lost: --------------- */
HCouldBeAPropertyToSet:= { tkIdentifier | <HAllPropertiesThatCouldBeUnary> }                 --->ProcessOr--->IToken
HAnyAllowedVariableName:={ tkIdentifier | _number | tkA | tkAllUnaryPropertiesIfNotAlready | tkUnaryVipercardProperties | tkAllNullaryOrUnaryPropertiesIfNotAlready }         --->ProcessOr--->IToken

// a bit of a space/time tradeoff in rules:
// when we cram everything into one rule, slightly less space in memory taken as CST has fewer branches
// however, this also means slightly longer time in traversing as there are many conditionals to see which subrule is not null
// also makes software more complex
// another space/time tradeoff:
// separating operators into different levels to implement operator precedence: makes a bigger parse tree and more parsing code
// it's also possible to make all binary operators the same level and work out the precedence in software = smaller parse tree to hold in memory

// must be last, or it would take precedence over most of the rest
tkIdentifier=/[a-zA-Z][0-9a-zA-Z$_]*/

//////////// Objects
// note use of Lvl6Expression - confirmed in product. you have to say 'cd btn (1+1)' and not 'cd btn 1+1'
// note that "btn 1" refers to a card button and "fld 1" refers to a bg fld. so you should typically specify.
// in software we'll stop you from saying "first cd btn 1"
// need to remember through which card it was accessed, "bg fld 1 of card 2" is different than "bg fld 1 of card 1"
// note that saying "of card" just means "of this card". "fld 1 of this card" still refers to a bg fld.
// tkStackAtEndOfLine is confirmed in emulator, for example 'answer the id of cd 1 of bg'
// interestingly, back and forth are cards. "answer the id of back" works.
// you can't usually "skip levels". card 1 of this stack and fld 1 of this bg are not allowed. 
// but let's allow card 1 of this stack because in the "go" command that is supported. 

Object:={ <ObjectSpecial> | <ObjectInterpretedFromString> | <ObjectBtn> | <ObjectFld> | <ObjectCard> |    <ObjectBg> | <ObjectStack>     }                     --->ProcessOr--->RequestedVelRef
ObjectBtn:={ <Ordinal> {tkCard | tkBg} tkBtn | {tkCard | tkBg} {tkBtn _id <Lvl6Expression> | tkBtn <Lvl6Expression> } }  [ <Of> <ObjectCard> ]                                     --->Custom--->RequestedVelRef
ObjectFld:={ <Ordinal> {tkCard | tkBg} tkFld | {tkCard | tkBg} {tkFld _id <Lvl6Expression> | tkFld <Lvl6Expression>} } [ <Of> <ObjectCard> ]                                   --->Custom--->RequestedVelRef
ObjectCard:= { _recent { tkCard | tkCardPlural | tkCardAtEndOfLine} | _back | _forth | tkCard _id <Lvl6Expression> | \
                     [_marked] tkCard <Lvl6Expression> | tkCardAtEndOfLine | <Ordinal> [_marked] { tkCard | tkCardAtEndOfLine} | \
                     <Position> [_marked] { tkCard | tkCardAtEndOfLine} } [ <Of> <ObjectBg> ]  [ <Of> <ObjectStack> ]                            --->Custom--->RequestedVelRef
ObjectBg:={tkBg _id <Lvl6Expression> | tkBg <Lvl6Expression> | <Ordinal> { tkBg | tkBgAtEndOfLine } | <Position> { tkBg | \
                        tkBgAtEndOfLine } | tkBgAtEndOfLine} [ <Of> <ObjectStack> ]                                                                          --->Custom--->RequestedVelRef
ObjectStack:={<Position> { tkStack | tkStackAtEndOfLine} | tkStack <Lvl6Expression> | tkStack _id <Lvl6Expression> | tkStackAtEndOfLine }                                         --->Custom--->RequestedVelRef  


ObjectSpecial:={tkProductName | _me }       --->Custom--->RequestedVelRef
// support variables, HOldStyleFnNonNullary (basically for the target), and HOldStyleFnNullaryOrNullaryPropGet (basically for the owner of),
ObjectInterpretedFromString:={ <HAnyAllowedVariableName> | <HOldStyleFnNonNullary> |  <HOldStyleFnNullaryOrNullaryPropGet> | tkStringLiteral | _target | tkLParen <Expr> tkRParen }              --->Custom--->RequestedVelRef

// CONFIRMED THIS COMPLEX BEHAVIOR IN EMULATOR:
// "target" and "the target" have subtly different behavior
// see "Pseudo-functions that refer to objects" in internaldocs.md
// 
// Testing in emulator:
// This does work:
// 	answer the name of cd btn fld 1
// 	answer the name of cd btn -xx
// 	answer the name of cd btn not true
// This parses as two things:
// 	answer the name of cd btn 5 - 4
// 	answer the name of cd btn 2 * 1
// so yes, it is a lvl6 expression that it wants
// 
// I used to say that a field could be defined as 
//  [{tkCard | tkBg}] {tkFld _id <Lvl6Expression> | tkFld <Lvl6Expression>}
// because in the product you can say "put 4 into fld 2"
// but this leads to an ambiguity 
// "cd fld id 1"
//which is truly ambiguous , it could mean cd (fld id 1) or (cd fld) id 1 and chevrotain says it doesn't know which.
// so in the parser we'll require the cd or bg before a fld, and during syntax transformation, take any "fld" or "btn" that isn't preceded by "cd" or "bg" and add that. 
// then we'll match the product's behavior because it will be parsed as (cd fld) id 1. and we'll still support a phrase like cd fld fld 1
// 

//////////// Helpers
// docs say that unless it is ofOnly or inOnly, of/in are interchangeable
Of:={tkOfOnly|tkInOnly}                         --->ProcessOr--->IToken
Ordinal:=[_the] tkOrdinal                   --->Custom--->OrdinalOrPosition
Position:=[_the] tkPosition                  --->Custom--->OrdinalOrPosition
MenuItem:={<Ordinal> _menuItem | _menuItem <Lvl6Expression>}       --->Constant|"{menuitemExpr}"
Menu:={<Ordinal> _menu | _menu <Lvl6Expression>}                             --->Constant|"{menuExpr}"
// tkIdentifier is one of: pattern,tool,scroll,fatbits
Window_1:=[_the] {tkCard  } _window    --->Constant|"{windowExpr}"
Window:={<Window_1> | <MessageBox>}             --->Constant|"{windowExpr}"
MessageBox:=[_the] _message [ { _box | _window } ]      --->Constant|"{msgBoxExpr}"




//////////// Containers
// the emulator lets you put text into a button, doesn't seem to do anything
// references to the messagebox are turned into references to a special global variable that is checked after every run
// handling the selection is tricky... let's support "get the selection, get char 1 of the selection, put "abc" into the selection" but not "put "a" into char 1 of the selection"
HSimpleContainer:={ <Menu> | <MessageBox> | [_the] _selection | _target | <ObjectBtn> | <ObjectFld> | <HAnyAllowedVariableName> }  --->Custom--->RequestedContainerRef
// fyi: HContainer is only used for 'put' command, never in expression evaluation
HContainer:=[<HChunk>] <HSimpleContainer>                                                                                         --->Custom--->RequestedContainerRef
HChunk:=<HChunkOne> MANY{{ <HChunkOne> }}ENDMANY                                                                                    --->Custom--->RequestedChunk
HChunkOne:={ <Ordinal> tkChunkGranularity | tkChunkGranularity <HChunkBound> [_to <HChunkBound>] } <Of>       --->Custom--->RequestedChunk
// we restrict what can be in chunkbounds to reduce the chances for parser ambiguity. this is just the "4" in get char 4 of "abcd", nothing special
HChunkBound:= { tkLParen <Expr> tkRParen | tkNumLiteral  | <HSimpleContainer> }                --->Custom--->VpcVal

//////////// Function Calls / Property Gets
// problem: old-style function calls look like this: "the sin of 4"
// so when you run into an expression like "get the sin of cd fld 1" is this looking up a property on the field,
// or calling a function on the contents of the field? I confirmed in the product that this is valid code.

// first approach was to support only the form "get the sin of (cd fld 1)" whereas "get the sin of cd fld 1" was always treated as a property lookup even if no such property
// pros: don't need to enumerate lots of builtin functions or properties (which would slow down lexing + take away variable names), they're both just a tkIdentifier
// pros: having a list of builtins is redundant since that list needs to exist in software too
// but it's hard to distinguish those. <Of> { <Object> | ... | <Lvl6Expression> } I thought might work - it will pick Object or Lvl6Expression, depending on which comes first
// but it's a lookahead parser--not backtracking--so once it goes into Object it can't come back out (unless backtracking is specifically turned on, which I don't want.)
// and running this Chevrotain warned about the ambiguous alternatives detected: <1,5> in <OR1> 

// so I'll do things a more complete way and have a list of all the possible properties
// I'll support "get the sin of cd fld 1", since sin is not 
// making a list of the properties, or a list of the functions, or both, could have worked, but I'll list just the properties, so that "get the myCustomFunction of cd fld 1" also works
// in other words when you get something like "get the sin of cd fld 1" we'll know sin has to be a function call because it's not in our list of properties.

// we'll also be able to distinguish between global property gets "get the lockScreen" and function calls "get the myCustomFunction"
// note that "the target" and "the number of" look like function calls but they aren't, they need to be handled differently
// note that "the length" is not handled specially, a phrase like "get the length of cd fld 1" should just work (previously we'd have trouble with it)
// note that you can't use fn style to get global properties, "get the version" is valid but not "get version()"
// note that we'll match the product and let you say "get the long sin of 4" and ignore the nonsensical adjective
// note thatHOldStyleFnNonNullary uses a Lvl6Expression not a Expr, otherwise 'the length of "abc" > 1' gets parsed wrong
HSource:={<HSource_1> | <HGenericFunctionCall> | <HSimpleContainer>}   --->Custom--->VpcVal
HSource_1:=  {tkStringLiteral | tkNumLiteral}                 --->Custom--->VpcVal
HFnCallWParens:={ <HAnyFnName> tkLParen MANYSEP{{ tkComma / <Expr> }}ENDMANYSEP tkRParen  }         --->Custom--->VpcVal
HUnaryPropertyGet:=[_the] [ tkAdjective ] <HAllPropertiesThatCouldBeUnary> tkOfOnly { <Object> | <Window> | <MenuItem> <Of> <Menu> | <HChunk> { <ObjectFld> | _me | [_the] _target } }       --->Custom--->VpcVal
HOldStyleFnNonNullary:=_the <HAnyFnName> tkOfOnly <Lvl6Expression>                                                                             --->Custom--->VpcVal
HOldStyleFnNullaryOrNullaryPropGet:= _the [ tkAdjective ] <HAnyFnNameOrAllPropertiesThatCouldBeNullary>             --->Custom--->VpcVal

// I think it's legit to increase the lookahead. <_the, _number, tkOfOnly, tkCard> may appear as a prefix path in all these alternatives. 
// but it is true, "the number of cd btn id 5" and "the number of cd btns" do have the same prefix
HGenericFunctionCall:={ MAX_LOOKAHEAD=5 <FnCallNumberOf> | <FnCallThereIs> | <HFnCallWParens> | <HUnaryPropertyGet> | <HOldStyleFnNonNullary> | <HOldStyleFnNullaryOrNullaryPropGet> }   --->ProcessOr--->VpcVal

// we used to support more here, but pared it down to match the original product
// we do though support "the number of marked cds of bg 1" which the product could not do
FnCallNumberOf:= _the _number tkOfOnly { <FnCallNumberOf_1>|<FnCallNumberOf_2>|<FnCallNumberOf_3>|<FnCallNumberOf_4>|<FnCallNumberOf_5>  }      --->ProcessOr--->VpcVal
FnCallNumberOf_1:=[{tkCard | tkBg}] { tkBtnPlural | tkFldPlural }      --->Custom--->VpcVal
FnCallNumberOf_2:=[_marked] tkCardPlural  [ <Of> { <ObjectBg> | <ObjectStack> } ]           --->Custom--->VpcVal
FnCallNumberOf_3:=tkBgPlural [ <Of> <ObjectStack> ]                                                       --->Custom--->VpcVal
FnCallNumberOf_4:={_windows | _menu | _menuItem <Of> <Menu>}                             --->Custom--->VpcVal
FnCallNumberOf_5:=tkChunkGranularity <Of> <Lvl3Expression>                                        --->Custom--->VpcVal

// you can't say "there is a line 1000 of cd fld 1" or "there is a line 1000 of "abc"", confirmed in the product
FnCallThereIs:= _there _is {_no | [_not] tkA} <Object>                   --->Custom--->VpcVal

// we want AnyPropertyVal to take many things
// well tkIdentifier can be a Lvl1Expression (treated as variable)
// and shadow can be a Lvl1Expression (treated as variable)
// text style lists are in the form "bold, italic".
// let's be simpler and accept an arbitarary amnt of terms here, and check it at runtime.
// point needs 2 terms, rect needs 4 terms, fonts need arbitrary number
AnyPropertyVal:= ATLEASTONESEP{{ tkComma / <Lvl1Expression> }}ENDATLEASTONESEP              --->BuildMap


//////////// Expressions

// "lookahead" only comes into play when there is an OPTIONAL, OR, etc. block
// otherwise we'll greedily eat whatever comes our way.
// this issue arose when dealing with "x is y" versus "x is within y", had to make "within" a token so it wouldn't go the wrong way
// if the grammar is
// Expr1:= <Expr2> letterc Integer 
// Expr2:= letterb [letterc lettera]
// I would have hoped that "b c 123" would work, trying out Expr2 and then falling back to Expr1
// but no, once we go into Expr2 we can never fall back into Expr1.
// increasing the 'lookahead' parameter in general isn't a good solution.


// placing in a tower like this is a good way to resolve left-recursion
// you can't do something like Expr:= <Expr> + <Expr> because this is left-recursion
// you might see Lvl6Expression referred to as "factor".
// chevrotain documentation notes that you can also flatten the tower to two tiers and do operator precedence in software,
// which reduces the size of parse trees in memory 
// note: to match the original product, operations do not short-circuit, so "true or myFunction()" will call myFunction
// also, implementing short-circuit correctly would be tricky because custom-function expansion currently puts the calls on previous lines
Expr:= <Lvl1Expression> MANY{{ <AndOrOr> <Lvl1Expression> }}ENDMANY                                                     --->BuildExpr|<AndOrOr>|<Lvl1Expression>|OpLogicalOrAnd
Lvl1Expression:= <Lvl2Expression> MANY{{ <ContainsOrGreaterLessEqual> <Lvl2Expression> }}ENDMANY            --->BuildExpr|<ContainsOrGreaterLessEqual>|<Lvl2Expression>|OpEqualityGreaterLessOrContains
Lvl2Expression:= <Lvl3Expression> MANY{{ _is <IsExpression> }}ENDMANY                                                           --->Custom--->VpcVal
Lvl3Expression:= <Lvl4Expression> MANY{{ tkStringConcat <Lvl4Expression> }}ENDMANY                                    --->BuildExpr|tkStringConcat|<Lvl4Expression>|OpStringConcat
Lvl4Expression:= <Lvl5Expression> MANY{{ tkPlusOrMinus <Lvl5Expression> }}ENDMANY                                       --->BuildExpr|tkPlusOrMinus|<Lvl5Expression>|OpPlusMinus
Lvl5Expression:= <Lvl6Expression> MANY{{ tkMultDivideExpDivMod <Lvl6Expression> }}ENDMANY                         --->BuildExpr|tkMultDivideExpDivMod|<Lvl6Expression>|OpMultDivideExpDivMod
Lvl6Expression:= [ { tkPlusOrMinus | _not } ] [<HChunk>] { <HSource> | tkLParen <Expr> tkRParen }                 --->Custom--->VpcVal

AndOrOr:={_or | _and}                                                                                                                       --->ProcessOr--->string
ContainsOrGreaterLessEqual:={ _contains | tkGreaterOrLessEqualOrEqual  }                                            --->ProcessOr--->string

// "x is a number" or "x is 1" or "x is within"
IsExpression:= [_not]  { tkA { _number | tkIdentifier }  | { tkInOnly | _within } <Lvl3Expression> | <Lvl3Expression> }       --->BuildMap

