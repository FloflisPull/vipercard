{"name": "lngOverview", "entries": [{"title": "Introduction", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Introduction\u0002times_12_biuosdce\u0002\n\n\n\nWelcome to ViperCard, an open source re-creation and re-imagination of 1987's HyperCard. We suggest first watching the example videos.\n\n\n\n"}, {"title": "Scripting Overview", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Scripting Overview\u0002times_12_biuosdce\u0002\n\n\nAll objects (all buttons, fields, and cards) have an associated set of code called a \"script.\"\n\nHere is an example script:\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    answer \"hello, world\"\nend mouseUp\u0002times_12_biuosdce\u0002\n\nIf this script is placed in a button, and the Browse tool is chosen (looks like a hand), the code will be run when the button is clicked.\n\nA line of code beginning with -- is ignored. This is often used to write explanatory comments. It can also be used to temporarily \"disable\" some code. You can press Cmd+Q in the script editor to quickly comment-out or uncomment a line.\n\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    -- this line is a comment\n    answer \"hello, world\"\nend mouseUp\u0002times_12_biuosdce\u0002\n\n\nThe indentation helps readability, but it is not mandatory. The code editor will automatically add indentation whenever you press Tab or Enter.\n\nA long line of code can be continued with a backslash, e.g.\n\n\u0002monaco_9_biuosdce\u0002answer (\"here is how to continue\" & \\\n    \"code across two lines\")\u0002times_12_biuosdce\u0002\n\nTo have a comment spanning many lines, do this,\n\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    --[[this line is a comment\n    and so is this\n    and also this]]\n    answer \"hello, world\"\nend mouseUp\u0002times_12_biuosdce\u0002\n\nThe language is not case sensitive. \u0002monaco_9_biuosdce\u0002on mouseup\u0002times_12_biuosdce\u0002 and \u0002monaco_9_biuosdce\u0002on mouseUp\u0002times_12_biuosdce\u0002 are equivalent.\n\nA common data type is a string (i.e. text).\n\n\u0002monaco_9_biuosdce\u0002put \"abc\" into x\u0002times_12_biuosdce\u0002\n\nDouble-quotes (\"), not single-quotes ('), must be used. A string with length 0, \"\", is perfectly valid and used often to represent a missing value. You may see this referred to as an 'empty string'. You can easily test for an empty string with code like:\n\n\u0002monaco_9_biuosdce\u0002if x is \"\" then\n    answer \"empty string\"\nend if\u0002times_12_biuosdce\u0002\n\nTo include a double-quote character in a string, use the quote constant,\n\n\u0002monaco_9_biuosdce\u0002answer (quote & \"a\" & quote) -- displays \"a\"\u0002times_12_biuosdce\u0002\n\nValid numbers include \u0002monaco_9_biuosdce\u0002123\u0002times_12_biuosdce\u0002, \u0002monaco_9_biuosdce\u0002123.456\u0002times_12_biuosdce\u0002, and scientific notation like \u0002monaco_9_biuosdce\u00021.23e6\u0002times_12_biuosdce\u0002 which means \u0002monaco_9_biuosdce\u00021.23\u0002times_12_biuosdce\u0002 multiplied by (\u0002monaco_9_biuosdce\u000210\u0002times_12_biuosdce\u0002 to the \u0002monaco_9_biuosdce\u00026\u0002times_12_biuosdce\u0002th power). Numbers can be in the range \u0002monaco_9_biuosdce\u0002[-1e18, 1e18]\u0002times_12_biuosdce\u0002, if a number is taken outside this range a runtime error will be thrown. Division by zero, logarithm of a negative, and so on will also cause a runtime error.\n\n\u0002monaco_9_biuosdce\u0002sqrt(0.5)\u0002times_12_biuosdce\u0002 is a function call meaning to take the square root of \u0002monaco_9_biuosdce\u00020.5\u0002times_12_biuosdce\u0002. \u0002monaco_9_biuosdce\u0002sum(1, 2)\u0002times_12_biuosdce\u0002 is a function call that adds 1 and 2 and returns 3. A comma separates the values sent. Function calls can be nested, for example, \u0002monaco_9_biuosdce\u0002sum(1, sum(2, 3))\u0002times_12_biuosdce\u0002.\n\nYou can call a function in two ways. \u0002monaco_9_biuosdce\u0002the mouseLoc\u0002times_12_biuosdce\u0002 is the same as \u0002monaco_9_biuosdce\u0002mouseLoc()\u0002times_12_biuosdce\u0002. \u0002monaco_9_biuosdce\u0002the length of \"abc\"\u0002times_12_biuosdce\u0002 is the same as \u0002monaco_9_biuosdce\u0002length(\"abc\")\u0002times_12_biuosdce\u0002.\n\nButtons and fields are referred to as \"objects\". Cards are also a type of object. And, the entire project, referred to as a \"stack\", is an object.\n\nA script can set properties of an object with syntax like:\n\n\u0002monaco_9_biuosdce\u0002set the width of cd btn \"myBtn\" to 450\u0002times_12_biuosdce\u0002\n\nChoose the button tool and select a button, and its id will be shown in the panel on the right. One can refer to an object by id in a script:\n\n\u0002monaco_9_biuosdce\u0002set the width of cd btn id 1234 to 450\u0002times_12_biuosdce\u0002\n\nWhen you are in the Browse tool and you interact with the page by clicking on buttons or pressing keystrokes, this causes messages to be fired. If you click a button, and if that button has a script that happens to have a function called \u0002monaco_9_biuosdce\u0002on mouseUp\u0002times_12_biuosdce\u0002 defined, then the code inside \u0002monaco_9_biuosdce\u0002on mouseUp\u0002times_12_biuosdce\u0002 will be run.\n\nThe documentation here has a list of Commands, Event Handlers, and Properties that can be set.\n"}, {"title": "Helpful Examples", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Helpful Examples\u0002times_12_biuosdce\u0002\n\n\nThe tutorial videos show helpful example code.\n\nExample 1:\n\u0002monaco_9_biuosdce\u0002\n-- after creating a field called \"myFld\":\n-- create a btn and put this in its script:\non mouseUp\n    -- when you click button \"Go\", you get 10 points!\n    put cd fld \"myFld\" into score\n    put (score + 10) into score\n    put score into cd fld \"myFld\"\nend mouseUp\n\n\u0002times_12_biuosdce\u0002\n\nExample 2:\n\u0002monaco_9_biuosdce\u0002\n-- after creating a btn called \"fish\":\n-- create a btn and put this in its script:\non mouseUp\n    -- when you click this, the fish moves\n    put the top of cd btn \"fish\" into y\n    subtract 10 from y\n    set the top of cd btn \"fish\" to y\nend mouseUp\n\n\u0002times_12_biuosdce\u0002\nExample 3:\n\u0002monaco_9_biuosdce\u0002\n-- create interactive art.\n-- put this in the card script,\n-- then when you choose the browse tool and \n-- click on the card, it will draw lines.\n\non mouseUp\n    put the clickH into X\n    put the clickV into y\n    \n    -- choose the line tool to draw lines\n    choose \"line\" tool\n    \n    -- make a loop that will repeat 10 times\n    repeat 10 times\n        put random(80) into randx\n        put random(80) into randy\n        -- will get random # between 1 and 80\n        drag from x, y to (x + randx), (y + randy)\n    end repeat\nend mouseUp\n  \n\u0002times_12_biuosdce\u0002\n\n"}, {"title": "Expressions", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Expressions\u0002times_12_biuosdce\u0002\n\n\n\nYou can use expressions like \u0002monaco_9_biuosdce\u0002put 1+2+3+4 into x\u0002times_12_biuosdce\u0002 or \u0002monaco_9_biuosdce\u0002put sqrt(0.5) + sqrt(0.6) into y\u0002times_12_biuosdce\u0002 in your code.\n\nExpressions can use parentheses to contain any level of nested sub-expressions, for example,\n\n\u0002monaco_9_biuosdce\u0002sqrt(0.5)\nsqrt(0.5 + sqrt(0.6))\nsqrt(0.5 + sqrt(0.6 + sqrt(0.7)))\u0002times_12_biuosdce\u0002\nare all valid.\n\nParentheses are used to dictate the order of operations, since\n\u0002monaco_9_biuosdce\u00023*(4+5)\u0002times_12_biuosdce\u0002\ngives a different answer than\n\u0002monaco_9_biuosdce\u0002(3*4)+5\u0002times_12_biuosdce\u0002\n\nParentheses are also used for grouping an expression. For example, we needed to get the (n + 1)th line of a variable, we would type \u0002monaco_9_biuosdce\u0002(line (n + 1) of x)\u0002times_12_biuosdce\u0002\n\nDo not type something like\n\u0002monaco_9_biuosdce\u0002answer (line n + 1 of x) -- this is hard to read.\u0002times_12_biuosdce\u0002\nwhich is unclear,\n\u0002monaco_9_biuosdce\u0002answer (line (n + 1) of x) -- this is preferred.\u0002times_12_biuosdce\u0002\n\nIn the expression \u0002monaco_9_biuosdce\u00022 + 3\u0002times_12_biuosdce\u0002, the symbol \u0002monaco_9_biuosdce\u0002+\u0002times_12_biuosdce\u0002 is called an operator. \nViperCard also has logical operators like \u0002monaco_9_biuosdce\u0002and\u0002times_12_biuosdce\u0002, \u0002monaco_9_biuosdce\u0002or\u0002times_12_biuosdce\u0002, and \u0002monaco_9_biuosdce\u0002not\u0002times_12_biuosdce\u0002.\nSee the \u0002monaco_9_biuosdce\u0002operators\u0002times_12_biuosdce\u0002 page in the Syntax documentation section\nfor more information.\n\n"}, {"title": "Message Box", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Message Box\u0002times_12_biuosdce\u0002\n\n\n\nOpen the Message Box by choosing 'Message Box' from the Go menu, or by pressing Cmd+M.\n\nThe message box can be used to quickly try out snippets of code. For example, if you want to evaluate some math, you can open the message box, type \u0002monaco_9_biuosdce\u0002put 12*34\u0002times_12_biuosdce\u0002, and press Enter. The result will be shown below.\n\nAs another example, if you have two buttons, and you want to align the left sides of the buttons, you can type \u0002monaco_9_biuosdce\u0002set the left of cd btn 2 to the left of cd btn 1\u0002times_12_biuosdce\u0002, and press Enter, and the action will be performed.\n\nYou can use the Up and Down arrow keys to see previously typed commands.\n\nYou can use a semicolon to combine many lines, for example \u0002monaco_9_biuosdce\u0002put 2 into x; put x * 3\u0002times_12_biuosdce\u0002\n\nYou can use the message box to check or change the contents of a global variable. In fact, any variable mentioned in the message box will be assumed to be a global, so you can write \u0002monaco_9_biuosdce\u0002put 4 into myGlobal\u0002times_12_biuosdce\u0002 without first needing to declare \u0002monaco_9_biuosdce\u0002global myGlobal\u0002times_12_biuosdce\u0002.\n\nIn your script, you can add debugging statements that trace a value and show it in the message box, as long as the message box is currently open.\n\n\u0002monaco_9_biuosdce\u0002\nput 45 * 56 into x\n-- if the msg box is open, will show the value of x\n-- otherwise, the line is ignored\nput x into the msg box\n-- code will continue running\n\u0002times_12_biuosdce\u0002\n\nThe shortened form,\n\n\u0002monaco_9_biuosdce\u0002\nput 45 * 56 into x\n-- if the msg box is open, will show the value of x\nput x\u0002times_12_biuosdce\u0002\n\nis also supported.\n\n\n"}, {"title": "Lists/arrays", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Lists/arrays\u0002times_12_biuosdce\u0002\n\n\n\nHere's a common way to create a list:\n\n\u0002monaco_9_biuosdce\u0002put \"\" into myList\nrepeat with x = 1 to 5\n    put 0 into line x of myList\nend repeat\u0002times_12_biuosdce\u0002\n\nAppend a number to the list:\n\n\u0002monaco_9_biuosdce\u0002put newline & 20 after myList\u0002times_12_biuosdce\u0002\n\nInsert a number in the list (if the line doesn't yet exist, it will be added)\n\n\u0002monaco_9_biuosdce\u0002put 6 into line 8 of myList\u0002times_12_biuosdce\u0002\n\nAdd 10 to each element of the list:\n\n\u0002monaco_9_biuosdce\u0002repeat with x = 1 to the number of lines in myList\n    put (line x of myList) + 10 into line x of myList\nend repeat\n\u0002times_12_biuosdce\u0002\n\n\u0002monaco_9_biuosdce\u0002myList\u0002times_12_biuosdce\u0002 is a normal variable, it can be passed as an argument and so on.\n\n\u0002times_12_+biuosdce\u0002Two-dimensional lists\u0002times_12_biuosdce\u0002\n\nHere's a common way to create a 2-d list:\n\u0002monaco_9_biuosdce\u0002put \"\" into myList\nrepeat with x = 1 to 5\n    repeat with y = 1 to 5\n        put 0 into item x of line y of myList\n    end repeat\nend repeat\u0002times_12_biuosdce\u0002\n\nInsert a new number into the list (it's ok if the line or item does not yet exist, it will be created):\n\n\u0002monaco_9_biuosdce\u0002put 3 into item 6 of line 8\u0002times_12_biuosdce\u0002\n\nAdd 10 to each element of the list:\n\n\u0002monaco_9_biuosdce\u0002repeat with y = 1 to the number of lines in myList\n    repeat with x = 1 to the number of items in line y of myList\n        if length(item x of line y of theLine) > 0 theLine\n            add 10 to item x of line y of theLine\n        end if\n    end repeat\nend repeat\n\u0002times_12_biuosdce\u0002\n\n"}, {"title": "Variables", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Variables\u0002times_12_biuosdce\u0002\n\n\n\nUse a statement like \n\n\u0002monaco_9_biuosdce\u0002put 3 into x\u0002times_12_biuosdce\u0002\n\nto put the value \"3\" into a variable named \"x\". You don't need to first declare x as a variable.\n\nVariable names and function names are case insensitive.\n\nVariable names cannot begin with a numeral, and can contain underscores but no other punctuation. Certain words cannot be used as variable names because they are already keywords or built-in functions. For example, you cannot have a variable named \"line\" because this is a keyword. You cannot have a variable named \"result\" because this is a built-in function.\n\nIf you try to read from a variable before it has been introduced, a runtime error will occur. \u0002monaco_9_biuosdce\u0002put notSeenBefore into x\u0002times_12_biuosdce\u0002 will cause an error unless there is a statement assigning a value to \u0002monaco_9_biuosdce\u0002notSeenBefore\u0002times_12_biuosdce\u0002.\n\nUse \"global\" to declare a variable as a global.\n1) it can be accessed from any other script\n2) its contents are saved even after the function is complete.\n\nFor example,\n\n\u0002monaco_9_biuosdce\u0002global coordX, coordY\nput 1 into coordX\nput 2 into coordY\u0002times_12_biuosdce\u0002\n\nIf another script says\n\u0002monaco_9_biuosdce\u0002global coordX, coordY\nanswer coordX, coordY\u0002times_12_biuosdce\u0002\nit will read the values that were set.\n\nGlobal variables are, though, reset when you close the stack (the values \nare not saved as part of the project.)\n\n\u0002times_12_+biuosdce\u0002Data types\u0002times_12_biuosdce\u0002\n\nA runtime error can be thrown if a value has the wrong \ntype, e.g.\n\u0002monaco_9_biuosdce\u0002put \"abc\" + 4 into z\u0002times_12_biuosdce\u0002\ncauses a runtime error! The addition operator requires numbers, and so creates a runtime error when getting the string \u0002monaco_9_biuosdce\u0002\"abc\"\u0002times_12_biuosdce\u0002.\n\nIf you need to convert from a text type to a number, you can use the functions \u0002monaco_9_biuosdce\u0002strToNumber\u0002times_12_biuosdce\u0002 and \u0002monaco_9_biuosdce\u0002numberToStr\u0002times_12_biuosdce\u0002. For example,\n\u0002monaco_9_biuosdce\u0002ask \"please enter a number\"\nput it into x\nif strToNumber(x) is not false then\n    answer \"the number plus one is\" && (strToNumber(x) + 1)\nend if\n\u0002times_12_biuosdce\u0002\n\nFor \u0002monaco_9_biuosdce\u0002if\u0002times_12_biuosdce\u0002 and \u0002monaco_9_biuosdce\u0002else if\u0002times_12_biuosdce\u0002, only \u0002monaco_9_biuosdce\u0002true\u0002times_12_biuosdce\u0002 or \u0002monaco_9_biuosdce\u0002false\u0002times_12_biuosdce\u0002 are accepted, any other value is a runtime error. For example, to check that a string is not empty, you cannot say \u0002monaco_9_biuosdce\u0002if myVar then\u0002times_12_biuosdce\u0002, you have to say something like \u0002monaco_9_biuosdce\u0002if length(myVar) > 0 then\u0002times_12_biuosdce\u0002\n\nNote that equality checks account for different data types: \n\n\u0002monaco_9_biuosdce\u0002if (456 is \"456.00\") then answer \"yes\" -- answers yes\u0002times_12_biuosdce\u0002\n\nA \"point\" data type is two numbers separated by a comma. You can write:\n\u0002monaco_9_biuosdce\u0002\nput 1 into x\nput 2 into y\nset the topleft of cd btn \"myBtn\" to x, y\n\u0002times_12_biuosdce\u0002\n\nThis is the same as writing\n\u0002monaco_9_biuosdce\u0002\nset the topleft of cd btn \"myBtn\" to 1, 2\nset the topleft of cd btn \"myBtn\" to \"1, 2\"\nor\nset the top of cd btn \"myBtn\" to 1\nset the left of cd btn \"myBtn\" to 2\n\u0002times_12_biuosdce\u0002\n"}, {"title": "Writing functions", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Writing functions\u0002times_12_biuosdce\u0002\n\n\nAn example of how to define and call a custom function:\n\u0002monaco_9_biuosdce\u0002function myAddition p1, p2\n    return p1 + p2\nend myAddition\non mouseUp\n    put myAddition(1,2) into x\nend mouseUp\u0002times_12_biuosdce\u0002\n\nAn example of how to define and call a custom handler:\n\u0002monaco_9_biuosdce\u0002on showMessage p1, p2\n    put p1 into cd fld \"results1\"\n    put p2 into cd fld \"results2\"\nend showMessage\non mouseUp\n    showMessage \"hello\", \"world\"\nend mouseUp\u0002times_12_biuosdce\u0002\n\nYou can define variadic functions (that accept any number of values), see the documentation for the paramCount() function.\n\nNo error is thrown if the incorrect number of arguments is given. Missing arguments are given the empty string (\"\").\n\u0002monaco_9_biuosdce\u0002myAddition(7, 8, 9) -- the extra argument 9 is ignored\nmyAddition(7, 8) -- p1 is assigned 7, p2 is assigned 8\nmyAddition(7) -- p1 is assigned 7, p2 is assigned \"\"\nmyAddition() -- p1 is assigned \"\", p2 is assigned \"\"\u0002times_12_biuosdce\u0002\n\nYou can use recursion.\n\nYou can place common code in the current card's script, or the stack's script, so that it can be called by many objects. This is because of the message hierarchy:\n\nMessages bubble upwards from a button or field, to the parent card, to the stack, until they are handled.\n* If you click on a button:\n    * A mouseUp message is created\n    * Script of the button is examined. \n    * If there is an 'on mouseUp' handler,\n        * Run the code in the mouseUp handler.\n        * If the handler completes, stop running code, we're done.\n        * If the handler calls 'pass mouseUp', continue:\n    * Script of the current card is examined.\n    * If there is an 'on mouseUp' handler,\n        * Run the code in the mouseUp handler.\n        * If the handler completes, stop running code, we're done.\n        * If the handler calls 'pass mouseUp', continue:\n    * Script of the current stack is examined.\n    * If there is an 'on mouseUp' handler,\n        * Run the code in the mouseUp handler.\n\n* Similarly, if you are typing text in a field, and type the letter 'a':\n    * A afterKeyUp message is created\n    * Script of the current field is examined.\n    * If there is an 'on afterKeyUp' handler,\n        * Run the code in the afterKeyUp handler.\n        * If the handler completes, stop running code, we're done.\n        * If the handler calls 'pass afterKeyUp', continue:\n    * Script of the current card is examined.\n    * If there is an 'on afterKeyUp' handler,\n        * Run the code in the afterKeyUp handler.\n        * If the handler completes, stop running code, we're done.\n        * If the handler calls 'pass afterKeyUp', continue:\n    * Script of the current stack is examined.\n    * If there is an 'on afterKeyUp' handler,\n        * Run the code in the mouseUp handler.\n\nCalling \u0002monaco_9_biuosdce\u0002exit to ViperCard\u0002times_12_biuosdce\u0002 passes the message up to ViperCard to be handled, and then exits all code execution. So it has two uses, it will exit all code execution, and will also fall back to the default ViperCard behavior.\n\nSee documentation of the 'pass' command for more information.\n\nCalls to custom commands and procedures also bubble upwards in the same way. A function in the stack's script can be called from any handler on a card, field, or button. A function in the card's script can be called from any handler in a field or button. So, it is useful to put commonly used utility code in a stack script so that it can be called from anywhere.\n\n"}, {"title": "Text and Chunks", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Text and Chunks\u0002times_12_biuosdce\u0002\n\n\n\n\u0002times_12_+biuosdce\u0002Lines\u0002times_12_biuosdce\u0002\n\nUse \u0002monaco_9_biuosdce\u0002newline\u0002times_12_biuosdce\u0002 to refer to a new line character.\n\nLet's say you wanted two lines of text in a field, you would use \nthe following:\n\n\u0002monaco_9_biuosdce\u0002put \"first line\" & newline & \"second line\" into cd fld \"myFld\"\u0002times_12_biuosdce\u0002\n\n(You shouldn't have to be concerned with platform differences: the constants 'return', 'cr', 'linefeed' are present for compatibility, but they are all equivalent. For convenience, copying and pasting text in and out of ViperCard will automatically translate newline characters, for example if you are running windows, when you copy text we'll automatically convert to \\r\\n newlines so it will work seemlessly with other software. Internally, ASCII 10 represents newline.)\n\n\u0002times_12_+biuosdce\u0002Chunks\u0002times_12_biuosdce\u0002\n\nViperCard can process text by using chunks. If you have a tab-separated list you can get the nth item like this:\n\n\u0002monaco_9_biuosdce\u0002\nput \"ab\" & tab & \"cd\" & tab & \"ef\" into myList\nset the itemDelimiter to tab\nput 2 into n\nanswer \"Result:\" & item n of myList\n\u0002times_12_biuosdce\u0002\nIf you have a comma-separated list you can get the nth item like this:\n\n\u0002monaco_9_biuosdce\u0002\nput \"ab,cd,ef\" into myList\nset the itemDelimiter to \",\"\nput 2 into n\nanswer \"Result:\" & item n of myList\n\u0002times_12_biuosdce\u0002\n\nMore advanced examples:\n\n\u0002monaco_9_biuosdce\u0002\nanswer char 2 of \"abcd\"\nanswer char (n + 1) of \"abcd\"\nanswer char 2 to 4 of \"abcd\"\n\nanswer item 2 of \"ab,cd,ef,gh\"\nanswer item (n + 1) of \"ab,cd,ef,gh\"\nanswer item 2 to 4 of \"ab,cd,ef,gh\"\n\nanswer first item of \"ab,cd,ef,gh\"\nanswer last item of \"ab,cd,ef,gh\"\nanswer any item of \"ab,cd,ef,gh\"\n\nput \"ab\" & newline & \"cd\" & newline & \"ef\" into myList\nanswer line 2 of myList\nanswer line (n + 1) of myList\nanswer line 2 to 3 of myList\n\u0002times_12_biuosdce\u0002\n\nRecursive scopes:\n\u0002monaco_9_biuosdce\u0002\nput \"ab,cd\" & newline & \"ef,gh\" & newline & \"ij,kl\" into myList\n\nanswer item 2 of line 2 of myList\nanswer char 2 of line 2 of myList\nanswer char 2 of item 2 of line 2 of myList\n\nanswer char 2 to 3 of item 2 to 3 of line 2 to 3 of myList\n\u0002times_12_biuosdce\u0002\n\n\n\u0002times_12_+biuosdce\u0002Modifying by chunk\u0002times_12_biuosdce\u0002\n\n\u0002monaco_9_biuosdce\u0002\nput \"abcd\" into x\nput \"A\" into char 2 of x\nput \"A\" into char 2 to 4 of x\n\nput \"10,20,30\" into myList\nput \"A\" into item 2 of myList\nput \"A\" into item 2 to 3 of myList\nmultiply item 2 of myList by 5\nadd 1 to item 2 of myList\n\nput \"A\" into first item of myList\nput \"A\" into last item of myList\nput \"A\" into any item of myList\n\nput \"A\" into before item 2 of myList\nput \"A\" into after item 2 of myList\nput \"A\" into before char 2 of item 2 of myList\n\nput \"A\" into before item 2 of cd fld \"myFld\"\nput \"A\" into after item 2 of cd fld \"myFld\"\nput \"A\" into before char 2 of item 2 of cd fld \"myFld\"\n\nput \"ab,cd\" & newline & \"ef,gh\" & newline & \"ij,kl\" into myList\nput \"A\" into item 2 of line 2 of myList\nput \"A\" into char 2 of line 2 of myList\nput \"A\" into char 2 of item 2 of line 2 of myList\n\nput \"A\" into char 2 to 3 of item 2 to 3 of line 2 to 3 of myList\n\u0002times_12_biuosdce\u0002\n\n\u0002times_12_+biuosdce\u0002Backwards compatiblity\u0002times_12_biuosdce\u0002\n\nWe went to much effort to maintain fidelity with HyperCard's chunk processing. All of the above can be done with words:\n\n\u0002monaco_9_biuosdce\u0002\nput \"ab cd ef\" into x\nanswer word 2 of x\nanswer word 2 to 3 of x\nput \"A\" into word 2 of x\nput \"A\" into word 2 to 3 of x\nput \"A\" into char 2 to 3 of word 2 to 3 of x\n\u0002times_12_biuosdce\u0002\n\nTo enable full compatibility with HyperCard, go to \u0002monaco_9_biuosdce\u0002Object->Stack info...\u0002times_12_biuosdce\u0002 and turn on compatibility mode. Chunk handling will now be identical (including the non-intuitive behavior seen below).\n\n\u0002monaco_9_biuosdce\u0002\n-- if compatibility mode is on:\n-- we follow HyperCard's non-intuitive behavior for the following:\nput \"ab,cd\" & newline & \"ef,gh\" & newline & \"ij,kl\" into myList\nput \"A\" into item 3 of item 4 of myList\nput \"A\" into item 3 of char 2 of myList\ndelete item 3 of item 4 of myList\ndelete item 3 of char 2 of myList\nadd 1 to item 3 of item 4 of myList\nadd 1 to item 3 of char 2 of myList\nanswer item 0 of myList\nput \"A\" into item 0 of myList\nanswer item 4 to 1 of myList\nput \"A\" into item 4 to 1 of myList\n\n\n-- The only known cases we don't support (we'll throw a runtime error):\nanswer item -1 of myList\nput \"A\" into item -1 of myList\ndelete item -1 of myList\nanswer char 2 of item 4 to 1 of myList\nput \"A\" into char 2 of item 4 to 1 of myList\ndelete char 2 of item 4 to 1 of myList\ndelete item 2 to 3 of myList\n\u0002times_12_biuosdce\u0002\n\nSee also documentation for the \u0002monaco_9_biuosdce\u0002delete\u0002times_12_biuosdce\u0002 command.\n"}, {"title": "Referring to objects", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Referring to objects\u0002times_12_biuosdce\u0002\n\n\nWays to refer to a stack:\n\u0002monaco_9_biuosdce\u0002\nthis stack\nstack 1\nstack \"name\"\n\u0002times_12_biuosdce\u0002\nWays to refer to a background:\n\u0002monaco_9_biuosdce\u0002\nthis background\nprev background\nnext background\nfirst background\nsecond background\nlast background\nbg 1\nbg id 1234\nbg \"name\"\n\u0002times_12_biuosdce\u0002\nWays to refer to a card:\n\u0002monaco_9_biuosdce\u0002\nthis card\nprev card\nnext card\nfirst card\nsecond card\nlast card\ncard 1\ncard id 1234\ncard \"name\"\n\u0002times_12_biuosdce\u0002\nWays to refer to a button or field:\n\u0002monaco_9_biuosdce\u0002\ncd btn id 1234\ncd btn \"myBtn\"\ncd btn 2\nfirst cd btn\nany cd btn\nlast cd btn\n\u0002times_12_biuosdce\u0002\nOther ways to refer to objects:\n\u0002monaco_9_biuosdce\u0002\nanswer the name of the target\nanswer the name of me\nanswer the name of the owner of cd btn id 1234\nput \"cd btn id 1234\" into x\nanswer the name of x\n\nfunction whichObject\n    return \"cd btn id 1234\"\nend whichObject\nanswer the name of whichObject()\n\u0002times_12_biuosdce\u0002\n\n"}, {"title": "Structure", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Structure\u0002times_12_biuosdce\u0002\n\n\n\n\u0002times_12_+biuosdce\u0002Loops\u0002times_12_biuosdce\u0002\n\u0002monaco_9_biuosdce\u0002repeat with x = 1 to 3\n    ...other code here...\nend repeat\u0002times_12_biuosdce\u0002\n\nRefer to \u0002monaco_9_biuosdce\u0002repeat\u0002times_12_biuosdce\u0002 under \"syntax\" for more information.\n\n\u0002times_12_+biuosdce\u0002If statements\u0002times_12_biuosdce\u0002\n\u0002monaco_9_biuosdce\u0002if x > 1 then\n    ...other code here...\nelse\n    ...other code here...\nend if\u0002times_12_biuosdce\u0002\nRefer to \u0002monaco_9_biuosdce\u0002if\u0002times_12_biuosdce\u0002 under \"syntax\" for more information.\n\n\n\u0002times_12_+biuosdce\u0002Scripts\u0002times_12_biuosdce\u0002\nNo code can exist outside of a handler or function.\n\n\u0002times_12_+biuosdce\u0002Handlers\u0002times_12_biuosdce\u0002\nHandlers look like this\n    \u0002monaco_9_biuosdce\u0002on mouseup \n        answer \"hello world\"\n    end mouseup\u0002times_12_biuosdce\u0002\nand respond to an event message.\n    \n\u0002times_12_+biuosdce\u0002Functions\u0002times_12_biuosdce\u0002\nFunctions look like this\n    \u0002monaco_9_biuosdce\u0002function myAddition p1, p2\n        return p1 + p2\n    end myAddition\u0002times_12_biuosdce\u0002\nThey can then be called with code like\n\u0002monaco_9_biuosdce\u0002put myAddition(1,2) into x\u0002times_12_biuosdce\u0002\nFunctions inside of functions are not supported.\n\n\n\u0002times_12_+biuosdce\u0002Statements\u0002times_12_biuosdce\u0002\nYou cannot have a line that is just\n    \u0002monaco_9_biuosdce\u0002sqrt(0.5)\u0002times_12_biuosdce\u0002\nwith no command, this is a syntax error.\n    \nStatements occur on separate lines, there's no way to have more than one statement on a line.\n    \n\u0002times_12_+biuosdce\u0002Expressions\u0002times_12_biuosdce\u0002\n\nA set of computations such as \u0002monaco_9_biuosdce\u00021+2+3+4\u0002times_12_biuosdce\u0002 or \u0002monaco_9_biuosdce\u0002sqrt(0.5) + sqrt(0.6)\u0002times_12_biuosdce\u0002 is an expression. Most places that take a value can be given an expression, for example,\n\n\u0002monaco_9_biuosdce\u0002go card 2\n-- is the same as\nput 1 into x\ngo card (x + 1)\n\nput \"abc\" into cd fld \"myFld1\"\nput \"abc\" into cd fld (prefix & \"1\")\n\nput \"a\" into line 4 of myList\nput \"a\" into line (x+1) of myList\n\nset the left of cd btn \"myBtn\" to x\nset the left of cd btn \"myBtn\" to (45 + 50 * cos(theta))\n\u0002times_12_biuosdce\u0002\n"}, {"title": "Tips & Shortcuts", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Tips & Shortcuts\u0002times_12_biuosdce\u0002\n\n\n\nGeneral tips\n\n* If your script is caught in an infinite loop, click the Stop button (black rectangle) to stop the script\n* See more error details, when in the Script Editor, by clicking on the error excerpt\n* Double-click the eraser tool to clear paint on the current card\n\nKeyboard shortcuts when editing text,\n\n* Cmd+C to copy\n* Cmd+X to cut\n* Cmd+V to paste\n* Cmd+A to select all\n* Cmd+Backspace to delete entire word\n* PageUp / PageDown to scroll one page\n* Shift+PageUp / Shift+PageDown to select one page\n* Home to move to start of line\n* Shift+Home to select to start of line\n* Cmd+Home to move to the start\n* Cmd+Shift+Home to select to the start\n* Left Arrow to move to the left\n* Shift+Left Arrow to select to the left\n* Cmd+Left Arrow to move left one word\n* Cmd+Shift+Left Arrow to select left one word\n* Cmd+Arrow Up to scroll up\n* Cmd+Arrow Down to scroll down\n* Cmd+D to duplicate the current line\n* Cmd+L to delete the current line\n* Cmd+Q to quickly comment-out or uncomment the current line\n* Cmd+Q when many lines are selected to comment-out all of them\n* Cmd+Q to comment-out a block of code\n* Tab key, to auto-indent code in a script\n\nSome of the main differences between ViperCard and HyperCard:\n* ViperCard is open source software that can run in any modern web browser\n* you can export stacks as a modern json format\n* art-stamps feature for adding clip art\n* new animation features like save-to-gif\n* in ViperCard you have to hit Save to save changes\n* but in ViperCard you have extensive undo history and can even undo changes made by a script\n\nA few of the differences between ViperCard and HyperCard:\n* You can use \u0002monaco_9_biuosdce\u0002--[[block comments]]\u0002times_12_biuosdce\u0002 that span many lines.\n* You can write \u0002monaco_9_biuosdce\u0002exit to ViperCard\u0002times_12_biuosdce\u0002 instead of \u0002monaco_9_biuosdce\u0002exit to HyperCard\u0002times_12_biuosdce\u0002\n* You must specify \u0002monaco_9_biuosdce\u0002cd\u0002times_12_biuosdce\u0002 or \u0002monaco_9_biuosdce\u0002bg\u0002times_12_biuosdce\u0002 when referring to a button or field, unless compatibility mode is enabled (Object->Stack Info)\n* Currently: message chain for key events is different, on afterkeydown to indicate cannot prevent default action.\n* Scripts only run when browse tool is active; you can exit an infinite loop by changing the current tool\n* You cannot read a variable that has not been set. \u0002monaco_9_biuosdce\u0002put unsetVar into x\u0002times_12_biuosdce\u0002 causes a runtime error.\n* hilite and checkmark are separate properties\n* label and name are separate properties\n* You can't have a variable named id, short, long, first, and so on.\n* The \u0002monaco_9_biuosdce\u0002choose\u0002times_12_biuosdce\u0002 command sets the emulated current tool, not the actual tool, and is limited to certain paint operations\n* The newline character is \\n and not \\r\n\n\n"}, {"title": "Credits", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002Credits\u0002times_12_biuosdce\u0002\n\n\n\nViperCard\nhttps://github.com/moltenform/vipercard\nCopyright (C) 2020 Ben Fisher\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. \n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nViperCard uses the following libraries:\n\nChevrotain\n    https://github.com/SAP/chevrotain\n    Apache License 2.0\n\nFileSaver.js\n    https://github.com/eligrey/FileSaver.js\n    MIT License\n\nGolly\n    https://github.com/dannygarcia/golly\n    MIT License\n\njs-lru\n    https://github.com/rsms/js-lru\n    MIT License\n\nClipboard.js\n    https://github.com/zenorocha/clipboard.js\n    MIT License\n    \nbase64js\n    https://github.com/beatgammit/base64-js\n    MIT License\n            \nJSGIF\n    https://github.com/antimatter15/jsgif\n    MIT License\n    \nBresenham easy.filter\n    http://members.chello.at/easyfilter/bresenham.html\n    written permission of author\n    \nlz-string\n    https://github.com/pieroxy/lz-string\n    MIT License\n\nPizzicato\n    https://github.com/alemangui/pizzicato\n    MIT License\n\nBowser\n    https://github.com/lancedikson/bowser\n    MIT License\n\ntypes-text-encoding \n    https://www.npmjs.com/package/@types/text-encoding\n    MIT License\n\ndeep-freeze\n    https://github.com/substack/deep-freeze\n    Public domain\n\npbkdf2 gist by Chris Veness\n\ndescription of Mac OS Roman character set\n    https://en.wikipedia.org/wiki/Mac_OS_Roman\n    http://creativecommons.org/licenses/by-sa/3.0/\n    Creative Commons Attribution-ShareAlike\n\nand a small excerpt from the SciTE code editor,\nported from C++ to TypeScript by Ben Fisher\nSciTE\n    https://www.scintilla.org/License.txt\n\n"}]}