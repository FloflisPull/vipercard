{"name": "lngSyntax", "entries": [{"title": "(operators)", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002(operators)\u0002times_12_biuosdce\u0002\n\n\nHere are the operators that can be used.\n\u0002monaco_9_biuosdce\u00022 * 3\u0002times_12_biuosdce\u0002\nmultiplication\n\u0002monaco_9_biuosdce\u00022 / 3\u0002times_12_biuosdce\u0002\ndivision\n\u0002monaco_9_biuosdce\u00022 ^ 3\u0002times_12_biuosdce\u0002\nraise to the third power\n\u0002monaco_9_biuosdce\u00027 div 5\u0002times_12_biuosdce\u0002\ntruncated division\n\u0002monaco_9_biuosdce\u00027 mod 5\u0002times_12_biuosdce\u0002\nmodulo\n\u0002monaco_9_biuosdce\u00022 > 3\u0002times_12_biuosdce\u0002\ngreater than\n\u0002monaco_9_biuosdce\u00022 < 3\u0002times_12_biuosdce\u0002\nless than\n\u0002monaco_9_biuosdce\u00022 >= 3\u0002times_12_biuosdce\u0002\ngreater than or equal to\n\u0002monaco_9_biuosdce\u00022 <= 3\u0002times_12_biuosdce\u0002\nless than or equal to\n\u0002monaco_9_biuosdce\u00022  ==  3\u0002times_12_biuosdce\u0002\nequal to\n\u0002monaco_9_biuosdce\u00022  !=  3\u0002times_12_biuosdce\u0002\nnot equal to\n\u0002monaco_9_biuosdce\u0002\"abc\" is \"def\"\u0002times_12_biuosdce\u0002\nequal to\n\u0002monaco_9_biuosdce\u0002\"abc\" is not \"def\"\u0002times_12_biuosdce\u0002\nnot equal to\n\u0002monaco_9_biuosdce\u0002\"abc\" is in \"123abcdef\"\u0002times_12_biuosdce\u0002\ndoes string contain another string\n\u0002monaco_9_biuosdce\u0002\"abc\" is not in \"123abcdef\"\u0002times_12_biuosdce\u0002\nstring is not in another string\n\u0002monaco_9_biuosdce\u00022 + 3\u0002times_12_biuosdce\u0002\naddition\n\u0002monaco_9_biuosdce\u00022 - 3\u0002times_12_biuosdce\u0002\nsubtraction\n\n\u0002monaco_9_biuosdce\u0002&\u0002times_12_biuosdce\u0002 and \u0002monaco_9_biuosdce\u0002&&\u0002times_12_biuosdce\u0002 combine two strings (concatenation).\n\u0002monaco_9_biuosdce\u0002put \"a\" & \"b\" into x\nanswer x -- displays \"ab\"\nput \"a\" && \"b\" into x\nanswer x -- displays \"a b\"\u0002times_12_biuosdce\u0002\n\nYou can also use \u0002monaco_9_biuosdce\u0002a = b\u0002times_12_biuosdce\u0002, which is equivalent to \u0002monaco_9_biuosdce\u0002a == b\u0002times_12_biuosdce\u0002\n\n\u0002times_12_+biuosdce\u0002Logical operators\u0002times_12_biuosdce\u0002\n\nThe constants 'true' and 'false' are used often. Internally there is no distinct boolean type, but the strings \"true\" and \"false\" are interpreted as true and false respectively.\n\u0002monaco_9_biuosdce\u0002true and false\u0002times_12_biuosdce\u0002\nlogical and\n\u0002monaco_9_biuosdce\u0002true or false\u0002times_12_biuosdce\u0002\nlogical or\n\u0002monaco_9_biuosdce\u0002not true\u0002times_12_biuosdce\u0002\nlogical not\n\nLogical operations are not guaranteed to be short-circuiting. In other words,\n\u0002monaco_9_biuosdce\u0002put (true or myfunction()) into x\u0002times_12_biuosdce\u0002\nstill will call \u0002monaco_9_biuosdce\u0002myfunction\u0002times_12_biuosdce\u0002, when it hypothetically could have been skipped.\n\n\n"}, {"title": "(constants)", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002(constants)\u0002times_12_biuosdce\u0002\n\n\nThe following constants are defined:\n\u0002monaco_9_biuosdce\u0002\npi\nnewline\ntab\nempty\nquote\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\ncolon\ncomma\ntrue\nfalse\nup\ndown\nspace\nreturn\ncr\nformfeed\nlinefeed\u0002times_12_biuosdce\u0002\n\n"}, {"title": "global", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002global\u0002times_12_biuosdce\u0002\n\n\nDeclares that a variable is a global.\n1) it can be accessed from any other script\n2) the contents are saved even after the function is complete.\nThe contents are lost when the stack is exited, however, and are not saved to disk or as part of the stack.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\nglobal currentData1, currentData2\nput \"stored 1\" into currentData1\nput \"stored 2\" into currentData2\n\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "if/then", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002if/then\u0002times_12_biuosdce\u0002\n\n\n\nUse to run certain code based on a condition that can be true or false.\n\nIn the example\n\n\u0002monaco_9_biuosdce\u0002\nput 2 into x\nif x > 0 then\n    answer \"x is greater than 0\"\nend if\u0002times_12_biuosdce\u0002\n\nFirst, we'll check the expression \u0002monaco_9_biuosdce\u0002x > 0\u0002times_12_biuosdce\u0002. Since it evaluates to true, the code inside is run. \n\nYou can also include an \"else\" section that will be run only if the expression evaluated to false.\n\n\u0002monaco_9_biuosdce\u0002if x > 0 then\n    answer \"x is greater than 0\"\nelse\n    answer \"x is not greater than 0\"\nend if\u0002times_12_biuosdce\u0002\n\nYou can chain together many different conditions with \"else if\". \n\n\u0002monaco_9_biuosdce\u0002\nput 3 into x\nif x > 3 then\n    answer \"x is greater than 3\"\nelse if x < 3 then\n    answer \"x is less than 3\"\nelse if x is 3 then\n    answer \"x is 3\"\nend if\u0002times_12_biuosdce\u0002\n\nAs soon as one of the branches is taken, all of the remaining branches are skipped -- even if the condition is true.\n\n\u0002monaco_9_biuosdce\u0002\nif 3+3 is 6 then\n    answer \"aaa\"\nelse if 2+2 is 4 then\n    -- this not run, even though the expression is true\n    answer \"bbb\"\nend if\n\u0002times_12_biuosdce\u0002\n"}, {"title": "if/then, single-line", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002if/then, single-line\u0002times_12_biuosdce\u0002\n\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\nif 3+3 is 6 then answer \"it is\"\n\n-- you can even do this\n\nif 3+3 is 7 then answer \"it is not\"\nelse answer \"it is\"\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "exit repeat", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002exit repeat\u0002times_12_biuosdce\u0002\n\n\nExit the current loop. Equivalent to \"break\" in C.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\nrepeat with x = 1 to 3\n    if x == 2 then\n        exit repeat\n    end if\n    answer x\nend repeat\n-- displays 1\n-- and does not display 2 or 3\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "exit", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002exit\u0002times_12_biuosdce\u0002\n\n\nSkips to the end of the current handler, skipping over all subsequent lines of code. Similar to return, but does not point to a value.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\non mouseUp\n    put cd fld \"fld1\" into x\n    if x is not a number then\n        answer \"you did not type a number\"\n        exit mouseUp\n        answer \"this will never get called\"\n    end if\n    put x * 2 into cd fld \"fld1\"\nend mouseUp\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "exit to ViperCard", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002exit to ViperCard\u0002times_12_biuosdce\u0002\n\n\nExits the current handler and passes the message up to ViperCard. Typically, this stops code execution completely.\n\nFor compatibility, \u0002monaco_9_biuosdce\u0002exit to HyperCard\u0002times_12_biuosdce\u0002 is also accepted. \u0002monaco_9_biuosdce\u0002exit to ViperCard\u0002times_12_biuosdce\u0002 can also be useful if you have overridden a default message and want to defer to the default behavior.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\non myHandler\n    exit to ViperCard\n    answer \"this will never get called\"\nend myHandler\non mouseUp\n    myHandler\n    answer \"and even this will never get called\"\nend mouseUp\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "next repeat", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002next repeat\u0002times_12_biuosdce\u0002\n\n\nInside a loop, go back to the top of the loop, skipping the next line(s) of code. Equivalent to \"continue\" in C.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\nrepeat with x = 1 to 3\n    if x == 2 then\n        next repeat\n    end if\n    answer x\nend repeat\n-- displays 1\n-- displays 3\n-- and does not display 2\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "pass", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002pass\u0002times_12_biuosdce\u0002\n\n\nExits the current function and calls a function higher in the message hierarchy. For example, if a button has the script\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    answer \"button handling the event\"\nend mouseUp\n-- and the current card has the script\non mouseUp\n    answer \"card handling the event\"\nend mouseUp\u0002times_12_biuosdce\u0002\nand the button is clicked, only the button's code will be run.\n\nIf you want both to be run, you can use the pass command. If a button has the script\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    answer \"button handling the event\"\n    pass mouseUp\n    -- any code here will be skipped\nend mouseUp\n--and the current card has the script\non mouseUp\n    answer \"card handling the event\"\nend mouseUp\u0002times_12_biuosdce\u0002\nand the button is clicked,\nboth will be run.\n\n"}, {"title": "repeat", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002repeat\u0002times_12_biuosdce\u0002\n\n\nUse to create a loop.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\nrepeat with x = 1 to 5\n    answer \"x is now\" & x\nend repeat\n\nrepeat with x = 5 down to 1\n    answer \"x is now\" & x\nend repeat\n\nrepeat 3 times\n    answer \"hi\"\nend repeat\n\nrepeat forever\n    answer \"this is an infinite loop\"\nend repeat\n\nput 0 into counter\nrepeat forever\n    answer \"but not this\"\n    add 1 to counter\n    if counter > 3 then\n        exit repeat\n    end if\nend repeat\n\nput 0 into counter\nrepeat until counter > 3\n    add 1 to counter\nend repeat\n\nput 0 into counter\nrepeat while counter <= 3\n    add 1 to counter\nend repeat\n\n\u0002times_12_biuosdce\u0002\n"}, {"title": "return", "body": "\u0002times_12_biuosdce\u0002\u0002times_24_biuosdce\u0002return\u0002times_12_biuosdce\u0002\n\n\nReturns a value from the current function.\nNote: no lines of code after the return statement will be run.\n\nExamples:\n\u0002monaco_9_biuosdce\u0002\n\nfunction myAddition p1, p2\n    return p1 + p2\n    answer \"this line will never be reached\"\nend myAddition\non mouseUp\n    put myAddition(1,2) into x\nend mouseUp\n\n\u0002times_12_biuosdce\u0002\n"}]}