{"name": "Fundamentals", "entries": [{"title": "Introduction", "body": "\u0002times_24_biuosdce\u0002Introduction\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002Welcome to ViperCard, an open source re-creation and re-imagination of 1987's HyperCard.\n\nIf you are new, the example videos will be helpful -- from the Help menu (the icon with a ? in the upper right corner of the screen), select \"Examples & Tutorials\"."}, {"title": "Fundamentals", "body": "\u0002times_24_biuosdce\u0002Fundamentals\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002All objects, including all buttons, fields, and cards, have an associated set of code called a \"script.\"\n\nHere is an example script:\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    answer \"hello, world\"\nend mouseUp\u0002times_12_biuosdce\u0002\n\nIf this script is placed in a button, and the Browse tool is chosen\n(looks like a hand), the code will be run when the button is clicked.\n\nA line of code beginning with -- is ignored.\nThis is often used to write explanatory comments.\nIt can also be used to temporarily \"disable\" some code.\nYou can press Cmd+Q in the script editor to quickly\ncomment-out or uncomment a line.\n\n\u0002monaco_9_biuosdce\u0002on mouseUp\n    -- this line is a comment\n    answer \"hello, world\"\nend mouseUp\u0002times_12_biuosdce\u0002\n\n\nIndentation is not mandatory, but it is recommended for clarity.\nThe code editor will automatically add indentation\nwhenever you press Enter.\n\nStatements must appear on separate lines.\n\nThe language is not case sensitive. \"on mouseup\" and \n\"on mouseUp\" are equivalent.\n\nA long line of code can be continued with a backslash, e.g.\n\n\u0002monaco_9_biuosdce\u0002answer (\"here is how to continue\" & \\\n    \"code across two lines\")\u0002times_12_biuosdce\u0002\n\nA common data type is a string (a sequence of text).\n\n\u0002monaco_9_biuosdce\u0002put \"abc\" into x\u0002times_12_biuosdce\u0002\n\nDouble-quotes (\"), not single-quotes ('), must be used.\nA string with length 0, \"\", is perfectly valid and used often to \nrepresent a missing value. You may see this referred to as \nan 'empty string'. You can easily test for an empty string \nwith code like:\n\u0002monaco_9_biuosdce\u0002if x is \"\" then\n    answer \"empty string\"\nend if\u0002times_12_biuosdce\u0002\n\nTo include a double-quote character in a string, use the quote constant,\n\n\u0002monaco_9_biuosdce\u0002answer (quote & \"a\" & quote) -- displays \"a\"\u0002times_12_biuosdce\u0002\n\nValid numbers include 123, 123.456, and scientific notation like \n1.23e6 which means 1.23 multiplied by (10 to the 6th power).\nNumbers can be in the range [-1e18, 1e18], if a number is \ntaken outside this range a runtime error will be thrown.\nDivision by zero, logarithm of a negative, and so on will also \ncause a runtime error.\n\n\u0002monaco_9_biuosdce\u0002sqrt(0.5)\u0002times_12_biuosdce\u0002 is a function call meaning to take the square root \nof 0.5. \u0002monaco_9_biuosdce\u0002sqrt\u0002times_12_biuosdce\u0002 is a built-in function, but we can also write a \nuser-defined function. \u0002monaco_9_biuosdce\u0002sum(1, 2)\u0002times_12_biuosdce\u0002 is a function call that \nadds 1 and 2 and returns 3. A comma separates the \nvalues sent. Function calls can be nested, for example,\n\u0002monaco_9_biuosdce\u0002sum(1, sum(2, 3))\u0002times_12_biuosdce\u0002.\n\nButtons and fields are referred to as \"objects\".\nCards are also a type of object.\nAnd, the entire project, referred to as a \"stack\", is an object.\n\nA script can set properties of an object with syntax like:\n\u0002monaco_9_biuosdce\u0002set the width of cd btn \"myBtn\" to 450\u0002times_12_biuosdce\u0002\nOne can also refer to an object by id:\n\u0002monaco_9_biuosdce\u0002set the width of cd btn id 1234 to 450\u0002times_12_biuosdce\u0002\n\nSee the \"set\" command documentation for a list of properties \nthat can be set.\n\nWhen you are in the Browse tool and you interact with the page \nby clicking on buttons or pressing keystrokes, this causes \nmessages to be fired.\n\nIf you click a button, and if that button has a script that happens\nto have a function called \"on mouseUp\" defined, then the code in\nthat function will be run."}, {"title": "Expressions", "body": "\u0002times_24_biuosdce\u0002Expressions\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002A set of computations such as \u0002monaco_9_biuosdce\u00021+2+3+4\u0002times_12_biuosdce\u0002 or \n\u0002monaco_9_biuosdce\u0002sqrt(0.5) + sqrt(0.6)\u0002times_12_biuosdce\u0002 is an expression. Expressions can contain\nany level of nested sub-expressions, for example,\n\n\u0002monaco_9_biuosdce\u0002sqrt(0.5)\nsqrt(0.5 + sqrt(0.6))\nsqrt(0.5 + sqrt(0.6 + sqrt(0.7)))\u0002times_12_biuosdce\u0002\nare all valid.\n\nParentheses are used to dictate the order of operations, since\n\u0002monaco_9_biuosdce\u00023*(4+5)\u0002times_12_biuosdce\u0002\ngives a different answer than\n\u0002monaco_9_biuosdce\u0002(3*4)+5\u0002times_12_biuosdce\u0002\n\nParentheses are also used for grouping an expression.\nfor example, we needed to get the (n + 1)th line of a \nvariable, we would type \u0002monaco_9_biuosdce\u0002(line (n + 1) of x)\u0002times_12_biuosdce\u0002\n\nDo not type something like\n\u0002monaco_9_biuosdce\u0002answer (line n + 1 of x) -- this is hard to read.\u0002times_12_biuosdce\u0002\nthis is unclear, and will often cause syntax errors.\n\n\u0002monaco_9_biuosdce\u0002answer (line (n + 1) of x) -- this is preferred.\u0002times_12_biuosdce\u0002\n\nIn the expression \u0002monaco_9_biuosdce\u00022 + 3\u0002times_12_biuosdce\u0002, the symbol \u0002monaco_9_biuosdce\u0002+\u0002times_12_biuosdce\u0002 is called an operator.\n\nHere are the operators that can be used.\n\u0002monaco_9_biuosdce\u00022 * 3\u0002times_12_biuosdce\u0002\n    multiplication\n\u0002monaco_9_biuosdce\u00022 / 3\u0002times_12_biuosdce\u0002\n    division\n\u0002monaco_9_biuosdce\u00022 ^ 3\u0002times_12_biuosdce\u0002\n    raise to the third power\n\u0002monaco_9_biuosdce\u00027 div 5\u0002times_12_biuosdce\u0002\n    truncated division\n\u0002monaco_9_biuosdce\u00027 mod 5\u0002times_12_biuosdce\u0002\n    modulo\n\u0002monaco_9_biuosdce\u00022 > 3\u0002times_12_biuosdce\u0002\n    greater than\n\u0002monaco_9_biuosdce\u00022 < 3\u0002times_12_biuosdce\u0002\n    less than\n\u0002monaco_9_biuosdce\u00022 >= 3\u0002times_12_biuosdce\u0002\n    greater than or equal to\n\u0002monaco_9_biuosdce\u00022 <= 3\u0002times_12_biuosdce\u0002\n    less than or equal to\n\u0002monaco_9_biuosdce\u00022  ==  3\u0002times_12_biuosdce\u0002\n    equal to\n\u0002monaco_9_biuosdce\u00022  !=  3\u0002times_12_biuosdce\u0002\n    not equal to\n\u0002monaco_9_biuosdce\u0002\"abc\" is \"def\"\u0002times_12_biuosdce\u0002\n    equal to\n\u0002monaco_9_biuosdce\u0002\"abc\" is not \"def\"\u0002times_12_biuosdce\u0002\n    not equal to\n\u0002monaco_9_biuosdce\u00022 + 3\u0002times_12_biuosdce\u0002\n    addition\n\u0002monaco_9_biuosdce\u00022 - 3\u0002times_12_biuosdce\u0002\n    subtraction\n\n\u0002monaco_9_biuosdce\u0002&\u0002times_12_biuosdce\u0002 and \u0002monaco_9_biuosdce\u0002&&\u0002times_12_biuosdce\u0002 combine two strings (concatenation).\n\u0002monaco_9_biuosdce\u0002put \"a\" & \"b\" into x\nanswer x -- displays \"ab\"\nput \"a\" && \"b\" into x\nanswer x -- displays \"a b\"\u0002times_12_biuosdce\u0002\n\n\u0002times_12_+biuosdce\u0002Logical operators\u0002times_12_biuosdce\u0002\n\nThe constants 'true' and 'false' are used often.\nInternally there is no distinct boolean type, but the strings \n\"true\" and \"false\" are interpreted as true and false respectively.\n\u0002monaco_9_biuosdce\u0002true and false\u0002times_12_biuosdce\u0002\n    logical and\n\u0002monaco_9_biuosdce\u0002true or false\u0002times_12_biuosdce\u0002\n    logical or\n\u0002monaco_9_biuosdce\u0002not true\u0002times_12_biuosdce\u0002\n    logical not\n\nLogical operations are not guaranteed to be short-circuiting.\nin other words,\n\u0002monaco_9_biuosdce\u0002put (true or myfunction()) into x\u0002times_12_biuosdce\u0002\nstill will call \u0002monaco_9_biuosdce\u0002myfunction\u0002times_12_biuosdce\u0002, when it hypothetically could have \nbeen skipped."}, {"title": "Variables", "body": "\u0002times_24_biuosdce\u0002Variables\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002Use a statement like \n\n\u0002monaco_9_biuosdce\u0002put 3 into x\u0002times_12_biuosdce\u0002\n\nto put the value \"3\" into a\nvariable named \"x\".\n\nYou don't need any line to declare x as a variable.\n\nVariable names and function names are case insensitive.\n\nVariable names cannot begin with a numeral, and can contain \nunderscores but no other punctuation. Certain words cannot be \nused as variable names because they are already keywords \nor built-in functions. For example, you cannot have a variable \nnamed \"line\" because this is a keyword. You cannot have a \nvariable named \"result\" because this is a built-in function.\n\nIf you try to read from a variable before it has been introduced, \na runtime error will occur. \u0002monaco_9_biuosdce\u0002put notSeenBefore into x\u0002times_12_biuosdce\u0002 will cause\nan error unless there is a statement assigning a value to \u0002monaco_9_biuosdce\u0002notSeenBefore\u0002times_12_biuosdce\u0002.\n\nUse \"global\" to declare a variable as a global.\n1) it can be accessed from any other script\n2) its contents are saved even after the function is complete.\n\nFor example,\n\n\u0002monaco_9_biuosdce\u0002global coordX, coordY\nput 1 into coordX\nput 2 into coordY\u0002times_12_biuosdce\u0002\n\nA runtime error can be thrown if a variable has the wrong \ntype, e.g.\n\u0002monaco_9_biuosdce\u0002put \"abc\" into x\nput 4 into y\nput x + y into z\u0002times_12_biuosdce\u0002\nThe addition operator requires numbers, and so creates a \nruntime error when getting the string \u0002monaco_9_biuosdce\u0002\"abc\"\u0002times_12_biuosdce\u0002.\n\nThe functions\n\u0002monaco_9_biuosdce\u0002strToNumber\u0002times_12_biuosdce\u0002\nand\n\u0002monaco_9_biuosdce\u0002numberToStr\u0002times_12_biuosdce\u0002\ncan be used to move back and forth.\n\nLogical types must be either true or false.\n\u0002monaco_9_biuosdce\u0002put (true and false) into x -- valid\nput (true and 1) into x -- runtime error, expected true or false\u0002times_12_biuosdce\u0002\n\nNumeric comparison understands equivalent representations, \nfor example:\n\u0002monaco_9_biuosdce\u0002put (456 is \"456.00\") into x -- true\nput (456 is \"00456.00\") into x -- true\u0002times_12_biuosdce\u0002\n\nA \"point\" data type is two numbers separated by a comma. \nThis can save typing.\n\u0002monaco_9_biuosdce\u0002set the left of cd btn \"myBtn\" to 10\nset the top of cd btn \"myBtn\" to 20\u0002times_12_biuosdce\u0002\nis equivalent to\n\u0002monaco_9_biuosdce\u0002set the topleft of cd btn \"myBtn\" to \"10, 20\"\u0002times_12_biuosdce\u0002"}, {"title": "Structure", "body": "\u0002times_24_biuosdce\u0002Structure\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002\u0002times_12_+biuosdce\u0002Scripts\u0002times_12_biuosdce\u0002\nA script contains zero or more functions.\nNo code or declarations can exist outside of a function.\n\n\n\u0002times_12_+biuosdce\u0002Functions\u0002times_12_biuosdce\u0002\nFunctions look like this\n    \u0002monaco_9_biuosdce\u0002on mouseup \n        answer \"hello world\"\n    end mouseup\u0002times_12_biuosdce\u0002\nor this\n    \u0002monaco_9_biuosdce\u0002function myAddition p1, p2\n        return p1 + p2\n    end myAddition\u0002times_12_biuosdce\u0002\n\nNested functions are not currently supported.\n\n\u0002times_12_+biuosdce\u0002Loops\u0002times_12_biuosdce\u0002\n\u0002monaco_9_biuosdce\u0002repeat with x = 1 to 3\n    ...other code here...\nend repeat\u0002times_12_biuosdce\u0002\n\nRefer to \u0002monaco_9_biuosdce\u0002repeat\u0002times_12_biuosdce\u0002 under \"commands\" for more information.\n\n\u0002times_12_+biuosdce\u0002If conditions\u0002times_12_biuosdce\u0002\n\u0002monaco_9_biuosdce\u0002if x > 1 then\n    ...other code here...\nelse\n    ...other code here...\nend if\u0002times_12_biuosdce\u0002\nRefer to \u0002monaco_9_biuosdce\u0002if\u0002times_12_biuosdce\u0002 under \"commands\" for more information.\n\n\n\u0002times_12_+biuosdce\u0002Statements\u0002times_12_biuosdce\u0002\nEvery statement has exactly one command.\nFor example, \n    \u0002monaco_9_biuosdce\u0002put sqrt(0.5) into x\u0002times_12_biuosdce\u0002\nis a valid statement.\nYou cannot have a line that is just\n    \u0002monaco_9_biuosdce\u0002sqrt(0.5)\u0002times_12_biuosdce\u0002\nwith no command, this is a syntax error.\n    \nStatements occur on separate lines, there's no way to cram \nmore than one statement onto a line.\n    \n\u0002times_12_+biuosdce\u0002Expressions\u0002times_12_biuosdce\u0002\nA set of computations such as \u0002monaco_9_biuosdce\u00021+2+3+4\u0002times_12_biuosdce\u0002 or \n\u0002monaco_9_biuosdce\u0002sqrt(0.5) + sqrt(0.6)\u0002times_12_biuosdce\u0002 is an expression. Most places that \nhave a value can be given an expression, for example,\n\u0002monaco_9_biuosdce\u0002go card 2\ngo card (x + 1)\n\nput \"abc\" into cd fld \"myFld\"\nput \"abc\" into cd fld (nameOfMyField & \"Fld\")\n\nput \"a\" into line 4 of myList\nput \"a\" into line (x+1) of myList\n\nset the left of cd btn \"myBtn\" to x\nset the left of cd btn (nameOfBtn) to (45 + 50 * cos(theta))\n\u0002times_12_biuosdce\u0002"}, {"title": "Lists/arrays", "body": "\u0002times_24_biuosdce\u0002Lists/arrays\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002Here's a common way to create a list:\n\n\u0002monaco_9_biuosdce\u0002put \"\" into myList\nrepeat with x = 1 to 5\n    put 0 into line x of myList\nend repeat\u0002times_12_biuosdce\u0002\n\nHow to append a number to the list:\n\n\u0002monaco_9_biuosdce\u0002put newline & 20 after myList\u0002times_12_biuosdce\u0002\n\nHow to add 10 to each element of the list:\n\n\u0002monaco_9_biuosdce\u0002repeat with x = 1 to the number of lines in myList\n    put (line x of myList) + 10 into line x of myList\nend repeat\n\u0002times_12_biuosdce\u0002\n\n\u0002monaco_9_biuosdce\u0002myList\u0002times_12_biuosdce\u0002 is a normal variable, it can be passed as an \nargument and so on."}, {"title": "Custom funcs", "body": "\u0002times_24_biuosdce\u0002Custom funcs\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002Here is an example of how to define and call a custom function.\n\u0002monaco_9_biuosdce\u0002function myAddition p1, p2\n    return p1 + p2\nend myAddition\non mouseUp\n    put myAddition(1,2) into x\nend mouseUp\u0002times_12_biuosdce\u0002\n\nA current limitation is that custom functions can only be called \nfrom the \"put\" command or the \"return\" command.\nFor example, if there is a custom function myAddition,\n    \u0002monaco_9_biuosdce\u0002put myAddition(4,5) into x\u0002times_12_biuosdce\u0002\nis supported,\n    \u0002monaco_9_biuosdce\u0002return myAddition(4,5)\u0002times_12_biuosdce\u0002\nis supported,\nbut\n    \u0002monaco_9_biuosdce\u0002set the width of cd btn \"btn1\" to myAddition(4,5)\u0002times_12_biuosdce\u0002\nis not yet supported.\n\nRecursion is supported.\n\nYou can define variadic functions (that accept any number of \nvalues), see the documentation for the paramCount() function.\n\nNo error is thrown if the incorrect number of arguments is given. \nMissing arguments are given the empty string (\"\").\n\u0002monaco_9_biuosdce\u0002myAddition(7, 8, 9) -- the extra argument 9 is ignored\nmyAddition(7, 8) -- p1 is assigned 7, p2 is assigned 8\nmyAddition(7) -- p1 is assigned 7, p2 is assigned \"\"\nmyAddition() -- p1 is assigned \"\", p2 is assigned \"\"\u0002times_12_biuosdce\u0002\n\nThe message hierarchy:\nMessages bubble upwards from an object, to the parent card, \nto the stack, until they are handled.\nIf you click on a button:\n    A mouseUp message is created\n    Script of the button is examined. \n    If there is an 'on mouseUp' handler,\n        Run the code in the mouseUp handler.\n        If the handler completes, stop running code, we're done.\n        If the handler calls 'pass mouseUp', continue:\n    Script of the current card is examined.\n    If there is an 'on mouseUp' handler,\n        Run the code in the mouseUp handler.\n        If the handler completes, stop running code, we're done.\n        If the handler calls 'pass mouseUp', continue:\n    Script of the current stack is examined.\n    If there is an 'on mouseUp' handler,\n        Run the code in the mouseUp handler.\n\nSimilarly, if you are typing text in a field, and type the letter 'a':\n    A afterKeyUp message is created\n    Script of the current field is examined.\n    If there is an 'on afterKeyUp' handler,\n        Run the code in the afterKeyUp handler.\n        If the handler completes, stop running code, we're done.\n        If the handler calls 'pass afterKeyUp', continue:\n    Script of the current card is examined.\n    If there is an 'on afterKeyUp' handler,\n        Run the code in the afterKeyUp handler.\n        If the handler completes, stop running code, we're done.\n        If the handler calls 'pass afterKeyUp', continue:\n    Script of the current stack is examined.\n    If there is an 'on afterKeyUp' handler,\n        Run the code in the mouseUp handler.\n\nSee documentation of the 'pass' command for an example.\n\nCalls to custom commands and procedures also bubble upwards \nin the same way. A function in the stack's script can be called \nfrom any handler on a card, field, or button. A function in the \ncard's script can be called from any handler in a field or button.\nSo, it is useful to put commonly used utility code in a stack \nscript so that it can be called from anywhere."}, {"title": "Chunks", "body": "\u0002times_24_biuosdce\u0002Chunks\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002We call a reference to a part of a container a \"chunk\". These \nexamples demonstrate what can be done with chunk expressions:\n\n\u0002monaco_9_biuosdce\u0002answer char 2 of \"abcd\" -- displays \"b\"\nanswer char 2 to 3 of \"abcd\" -- displays \"bc\"\nanswer item 2 of \"a,b,c,d\" -- displays \"b\"\nanswer item 2 to 3 of \"a,b,c,d\" -- displays \"b,c\"\nanswer word 2 of \"a b c d\" -- displays \"b\"\nanswer word 2 to 3 of \"a b c d\" -- displays \"b c\"\nput \"a\" & newline & \"b\" & newline & \"c\" & newline into lines\nanswer line 2 of lines -- displays \"b\"\nanswer line 2 to 3 of lines -- displays \"b\" & newline & \"c\"\n\nanswer first char of \"abcd\" -- displays \"a\"\nanswer second char of \"abcd\" -- displays \"b\"\nanswer any char of \"abcd\" -- displays a random choice\nanswer middle char of \"abcd\" \nanswer last char of \"abcd\" \n\nput \"x\" into char 2 of \"abcd\"\nput \"x\" into char 2 to 3 of \"abcd\"\nput \"x\" into item 2 of \"a,b,c,d\"\nput \"x\" into item 2 to 3 of \"a,b,c,d\"\nput \"x\" into word 2 of \"a b c d\"\nput \"x\" into word 2 to 3 of \"a b c d\"\u0002times_12_biuosdce\u0002\n\nchunks can be nested arbitrarily, as in\n\u0002monaco_9_biuosdce\u0002(char 2 of (char 2 to 3 of \"abcd\"))\u0002times_12_biuosdce\u0002\nor\n\u0002monaco_9_biuosdce\u0002(char (line 4 of myList) of \"abcd\")\u0002times_12_biuosdce\u0002\n\nthe itemdelimeter is \",\" by default but can be changed.\nthis can be helpful for simple parsing.\n\u0002monaco_9_biuosdce\u0002put \"abc|def|ghi\" into x\nset the itemdelimiter to \"|\"\nanswer item 2 of x -- displays \"def\"\u0002times_12_biuosdce\u0002"}, {"title": "Constants", "body": "\u0002times_24_biuosdce\u0002Constants\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002Use \u0002monaco_9_biuosdce\u0002newline\u0002times_12_biuosdce\u0002 to refer to a new line character.\nLet's say you wanted two lines of text in a field, you would use \nthe following:\n\u0002monaco_9_biuosdce\u0002put \"first line\" & newline & \"second line\" into cd fld \"myFld\"\u0002times_12_biuosdce\u0002\n\n(You shouldn't have to be concerned with newline platform \ndifferences: the constants return, cr, linefeed are present for \nbackwards compatibility, but they are are all mapped to \\n ascii \n10 internally. If you are running windows, when you copy text \nwe'll automatically convert to \\r\\n newlines so if you paste \ninto notepad, it looks right.)\n\nThe following constants are defined:\n\u0002monaco_9_biuosdce\u0002\npi\nnewline\ntab\nempty\nquote\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\ncolon\ncomma\ntrue\nfalse\nup\ndown\nspace\nreturn\ncr\nformfeed\nlinefeed\u0002times_12_biuosdce\u0002"}, {"title": "Message Box", "body": "\u0002times_24_biuosdce\u0002Message Box\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002Open the Message Box by choosing 'Message Box' from the Go menu, or by pressing Cmd+M.\n\nThe message box can be used to quickly try out snippets of code. For example, if you want to evaluate some math, you can open the message box, type \u0002monaco_9_biuosdce\u0002put 12*34\u0002times_12_biuosdce\u0002, and press Enter. The result will be shown below.\n\nAs another example, if you have two buttons, and you want to align the left sides of the buttons, you can type \u0002monaco_9_biuosdce\u0002set the left of cd btn 2 to the left of cd btn 1\u0002times_12_biuosdce\u0002, and press Enter, and the action will be performed.\n\nYou can use the Up and Down arrow keys to see previously typed commands.\n\nYou can use a semicolon to combine many lines, for example \u0002monaco_9_biuosdce\u0002put 2 into x; put x * 3\u0002times_12_biuosdce\u0002\n\nYou can use the message box to check or change the contents of a global variable. In fact, any variable mentioned in the message box will be assumed to be a global, so you can write \u0002monaco_9_biuosdce\u0002put 4 into myGlobal\u0002times_12_biuosdce\u0002 without first needing to declare \u0002monaco_9_biuosdce\u0002global myGlobal\u0002times_12_biuosdce\u0002.\n\nIn your script, you can add debugging statements that trace a value and show it in the message box, as long as the message box is currently open.\n\n\u0002monaco_9_biuosdce\u0002\nput 45 * 56 into x\n-- if the msg box is open, will show the value of x\n-- otherwise, the line is ignored\nput x into the msg box\n-- code will continue running\n\u0002times_12_biuosdce\u0002\n\nThe shortened form,\n\n\u0002monaco_9_biuosdce\u0002\nput 45 * 56 into x\n-- if the msg box is open, will show the value of x\nput x\u0002times_12_biuosdce\u0002\n\nis also supported, but isn't encouraged because it is harder to read."}, {"title": "Tips & Shortcuts", "body": "\u0002times_24_biuosdce\u0002Tips & Shortcuts\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002General tips\n\n-   Double-click the eraser tool to clear paint on the current card\n-   If your script is caught in an infinite loop, click the Stop button (black rectangle) to stop the script\n-   See more error details, when in the Script Editor, by clicking on the error excerpt\n\nKeyboard shortcuts when editing text,\n\n-   Cmd+C to copy\n-   Cmd+X to cut\n-   Cmd+V to paste\n-   Cmd+A to select all\n-   Cmd+Backspace to delete entire word\n-   PageUp / PageDown to scroll one page\n-   Shift+PageUp / Shift+PageDown to select one page\n-   Home to move to start of line\n-   Shift+Home to select to start of line\n-   Cmd+Home to move to the start\n-   Cmd+Shift+Home to select to the start\n-   Left Arrow to move to the left\n-   Shift+Left Arrow to select to the left\n-   Cmd+Left Arrow to move left one word\n-   Cmd+Shift+Left Arrow to select left one word\n-   Cmd+Arrow Up to scroll up\n-   Cmd+Arrow Down to scroll down\n-   Cmd+D to duplicate the current line\n-   Cmd+L to delete the current line\n-   Cmd+Q to quickly comment-out or uncomment the current line\n-   Cmd+Q when many lines are selected to comment-out all of them\n-   Tab key, to automatically indent code\n\nSome of the main differences between ViperCard and HyperCard:\n-  ViperCard is open source software that can run in any modern web browser\n-  you can export stacks as a modern json format\n-  art-stamps feature for adding clip art\n-  new animation features like save-to-gif\n-  in ViperCard you have to hit Save to save changes\n-  in ViperCard you have an extensive undo history and can even undo changes made by a script\n\nScripting differences between ViperCard and HyperCard:\n- You can write \u0002monaco_9_biuosdce\u0002exit to ViperCard\u0002times_12_biuosdce\u0002 instead of \u0002monaco_9_biuosdce\u0002exit to HyperCard\u0002times_12_biuosdce\u0002\n- You must specify \u0002monaco_9_biuosdce\u0002cd\u0002times_12_biuosdce\u0002 or \u0002monaco_9_biuosdce\u0002bg\u0002times_12_biuosdce\u0002 when referring to a button or field\n- Newline char is \\n and not \\r\n- Added: afterkeydown, replace command, owner property\n- Currently: message chain for key events is different, on afterkeydown to indicate cannot prevent default action.\n- Currently: wait until the mouseclick is not supported\n- Scripts only run when browse tool is active; you can exit an infinite loop by changing the tool\n- Unset variables do not default to containing their name\n- hilite and checkmark are separate properties\n- Set the label vs set the name\n- Can't have a variable named id, length, short, long, first, second\n- A custom handler \"on myCode\" and custom function \"function myCode\" are equivalent, both use return and set \"the result\"\n- The \u0002monaco_9_biuosdce\u0002choose\u0002times_12_biuosdce\u0002 command sets the emulated current tool, not the actual tool, and is limited to certain paint operations\n- You have to write 'sin(x)', not 'the sin of x'. you have to write 'the clickLoc()', not 'the clickLoc'."}, {"title": "Credits", "body": "\u0002times_24_biuosdce\u0002Credits\n\n\u0002times_12_biuosdce\u0002\u0002times_12_biuosdce\u0002ViperCard\nhttps://github.com/moltenform/vipercard\nCopyright (C) 2018 Ben Fisher\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. \n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nViperCard uses the following libraries:\n\nChevrotain\n    https://github.com/SAP/chevrotain\n    Apache License 2.0\n\nFileSaver.js\n    https://github.com/eligrey/FileSaver.js\n    MIT License\n\nGolly\n    https://github.com/dannygarcia/golly\n    MIT License\n    \nJSGIF\n    https://github.com/antimatter15/jsgif\n    MIT License\n    \njs-lru\n    https://github.com/rsms/js-lru\n    MIT License\n    \nClipboard.js\n    https://github.com/zenorocha/clipboard.js\n    MIT License\n    \nbase64js\n    https://github.com/beatgammit/base64-js\n    MIT License\n\ntypes-text-encoding \n    https://www.npmjs.com/package/@types/text-encoding\n    MIT License\n    \nBresenham easy.filter\n    http://members.chello.at/easyfilter/bresenham.html\n    written permission of author\n\ndescription of Mac OS Roman character set\n    https://en.wikipedia.org/wiki/Mac_OS_Roman\n    http://creativecommons.org/licenses/by-sa/3.0/\n    Creative Commons Attribution-ShareAlike\n\nand a small excerpt from the SciTE code editor,\nported from C++ to TypeScript by Ben Fisher\nSciTE\n    https://www.scintilla.org/SciTE.html\n    https://www.scintilla.org/License.txt"}]}
