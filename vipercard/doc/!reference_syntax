
=====
if/then
=====

        Use to run certain code based on a condition that can be true or false.

        In the example

        `
        put 2 into x
        if x > 0 then
            answer "x is greater than 0"
        end if`

        First, we'll check the expression `x > 0`. Since it evaluates to true,
        the code inside is run. 

        You can also include an "else" section that will be run only if the expression evaluated to false.

        `if x > 0 then
            answer "x is greater than 0"
        else
            answer "x is not greater than 0"
        end if`

        You can chain together many different conditions with "else if". 

        `
        put 3 into x
        if x > 3 then
            answer "x is greater than 3"
        else if x < 3 then
            answer "x is less than 3"
        else if x is 3 then
            answer "x is 3"
        end if`

        Like in other programming languages, as soon as one of the branches
        is taken, all of the remaining branches are skipped -- even if the condition is true.

        `
        if 3+3 is 6 then
            answer "aaa"
        else if 2+2 is 4 then
            -- this not run, even though the expression is true
            answer "bbb"
        end if
        `

=====
if/then on a single-line
=====

       This is implemented in 0.3.
       
        Examples:
        
        if 3+3 is 6 then answer "it is"
        
        -- you can even do this
        
        if 3+3 is 7 then answer "it is not"
        else answer "it is"

=====
exit___repeat
=====
        Exit the current loop.
        Equivalent to "break" in C.

        Examples:

        repeat with x = 1 to 3
            if x == 2 then
                exit repeat
            end if
            answer x
        end repeat
        -- displays 1
        -- and does not display 2 or 3

=====
exit currentHandler
=====
        Skips to the end of the current handler, skipping over all subsequent lines 
        of code. Similar to return, but does not point to a value.

        Examples:

        on mouseUp
            put cd fld "fld1" into x
            if x is not a number then
                answer "you did not type a number"
                exit mouseUp
                answer "this will never get called"
            end if
            put x * 2 into cd fld "fld1"
        end mouseUp

=====
exit to ViperCard
=====
        Exits the current handler and passes the message up to ViperCard.
        Typically, this stops code execution completely.

        For compatibility, `exit to HyperCard` is also accepted. `exit to ViperCard`
        can also be useful if you have overridden a default message and want to
        defer to the default behavior, see below.

        Examples:

        on myHandler
            exit to ViperCard
            answer "this will never get called"
        end myHandler
        on mouseUp
            myHandler
            answer "and even this will never get called"
        end mouseUp
        on 

