



=====
Structure
=====

^Scripts^
A script contains zero or more functions.
No code or declarations can exist outside of a function.


^Functions^
Functions look like this
    `on mouseup 
        answer "hello world"
    end mouseup`
or this
    `function myAddition p1, p2
        return p1 + p2
    end myAddition`

Nested functions are not currently supported.

^Loops^
`repeat with x = 1 to 3
    ...other code here...
end repeat`

Refer to `repeat` under "commands" for more information.

^If conditions^
`if x > 1 then
    ...other code here...
else
    ...other code here...
end if`
Refer to `if` under "commands" for more information.


^Statements^
Every statement has exactly one command.
For example, 
    `put sqrt(0.5) into x`
is a valid statement.
You cannot have a line that is just
    `sqrt(0.5)`
with no command, this is a syntax error.
    
Statements occur on separate lines, there's no way to cram 
more than one statement onto a line.
    
^Expressions^
A set of computations such as `1+2+3+4` or 
`sqrt(0.5) + sqrt(0.6)` is an expression. Most places that 
have a value can be given an expression, for example,
`go card 2
go card (x + 1)

put "abc" into cd fld "myFld"
put "abc" into cd fld (nameOfMyField & "Fld")

put "a" into line 4 of myList
put "a" into line (x+1) of myList

set the left of cd btn "myBtn" to x
set the left of cd btn (nameOfBtn) to (45 + 50 * cos(theta))
`


=====
Lists/arrays
=====

Here's a common way to create a list:

`put "" into myList
repeat with x = 1 to 5
    put 0 into line x of myList
end repeat`

How to append a number to the list:

`put newline & 20 after myList`

How to add 10 to each element of the list:

`repeat with x = 1 to the number of lines in myList
    put (line x of myList) + 10 into line x of myList
end repeat
`

`myList` is a normal variable, it can be passed as an 
argument and so on.

=====
Custom funcs
=====
Here is an example of how to define and call a custom function.
`function myAddition p1, p2
    return p1 + p2
end myAddition
on mouseUp
    put myAddition(1,2) into x
end mouseUp`

A current limitation is that custom functions can only be called 
from the "put" command or the "return" command.
For example, if there is a custom function myAddition,
    `put myAddition(4,5) into x`
is supported,
    `return myAddition(4,5)`
is supported,
but
    `set the width of cd btn "btn1" to myAddition(4,5)`
is not yet supported.

You can use recursion.

You can define variadic functions (that accept any number of 
values), see the documentation for the paramCount() function.

No error is thrown if the incorrect number of arguments is given. 
Missing arguments are given the empty string ("").
`myAddition(7, 8, 9) -- the extra argument 9 is ignored
myAddition(7, 8) -- p1 is assigned 7, p2 is assigned 8
myAddition(7) -- p1 is assigned 7, p2 is assigned ""
myAddition() -- p1 is assigned "", p2 is assigned ""`

The message hierarchy:
Messages bubble upwards from an object, to the parent card, 
to the stack, until they are handled.
If you click on a button:
    A mouseUp message is created
    Script of the button is examined. 
    If there is an 'on mouseUp' handler,
        Run the code in the mouseUp handler.
        If the handler completes, stop running code, we're done.
        If the handler calls 'pass mouseUp', continue:
    Script of the current card is examined.
    If there is an 'on mouseUp' handler,
        Run the code in the mouseUp handler.
        If the handler completes, stop running code, we're done.
        If the handler calls 'pass mouseUp', continue:
    Script of the current stack is examined.
    If there is an 'on mouseUp' handler,
        Run the code in the mouseUp handler.

Similarly, if you are typing text in a field, and type the letter 'a':
    A afterKeyUp message is created
    Script of the current field is examined.
    If there is an 'on afterKeyUp' handler,
        Run the code in the afterKeyUp handler.
        If the handler completes, stop running code, we're done.
        If the handler calls 'pass afterKeyUp', continue:
    Script of the current card is examined.
    If there is an 'on afterKeyUp' handler,
        Run the code in the afterKeyUp handler.
        If the handler completes, stop running code, we're done.
        If the handler calls 'pass afterKeyUp', continue:
    Script of the current stack is examined.
    If there is an 'on afterKeyUp' handler,
        Run the code in the mouseUp handler.

See documentation of the 'pass' command for an example.

Calls to custom commands and procedures also bubble upwards 
in the same way. A function in the stack's script can be called 
from any handler on a card, field, or button. A function in the 
card's script can be called from any handler in a field or button.
So, it is useful to put commonly used utility code in a stack 
script so that it can be called from anywhere.
=====
Chunks
=====

We call a reference to a part of a container a "chunk". These 
examples demonstrate what can be done with chunk expressions:

`answer char 2 of "abcd" -- displays "b"
answer char 2 to 3 of "abcd" -- displays "bc"
answer item 2 of "a,b,c,d" -- displays "b"
answer item 2 to 3 of "a,b,c,d" -- displays "b,c"
answer word 2 of "a b c d" -- displays "b"
answer word 2 to 3 of "a b c d" -- displays "b c"
put "a" & newline & "b" & newline & "c" & newline into lines
answer line 2 of lines -- displays "b"
answer line 2 to 3 of lines -- displays "b" & newline & "c"

answer first char of "abcd" -- displays "a"
answer second char of "abcd" -- displays "b"
answer any char of "abcd" -- displays a random choice
answer middle char of "abcd" 
answer last char of "abcd" 

put "x" into char 2 of "abcd"
put "x" into char 2 to 3 of "abcd"
put "x" into item 2 of "a,b,c,d"
put "x" into item 2 to 3 of "a,b,c,d"
put "x" into word 2 of "a b c d"
put "x" into word 2 to 3 of "a b c d"`

chunks can be nested arbitrarily, as in
`(char 2 of (char 2 to 3 of "abcd"))`
or
`(char (line 4 of myList) of "abcd")`

the itemdelimeter is "," by default but can be changed.
this can be helpful for simple parsing.
`put "abc|def|ghi" into x
set the itemdelimiter to "|"
answer item 2 of x -- displays "def"`



=====
Constants
=====
Use `newline` to refer to a new line character.
Let's say you wanted two lines of text in a field, you would use 
the following:
`put "first line" & newline & "second line" into cd fld "myFld"`

(You shouldn't have to be concerned with platform 
differences: the constants 'return', 'cr', 'linefeed' are present for 
backwards compatibility, but they all work equivalently. for convenience,
copying and pasting text in and out of ViperCard will automatically
translate newline characters, for example if you are running windows,
when you copy text we'll automatically convert to \r\n newlines so 
it will work seemlessly with other software.)

